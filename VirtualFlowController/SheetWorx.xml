<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SheetWorx</name>
    </assembly>
    <members>
        <member name="T:SheetWorx.AddinFunctionCollection">
            <summary>
            Represents the collection of add-in function names which have been registered in a <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.AddinFunctionCollection.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.AddinFunctionCollection"/> contains the given <paramref name="name"/>.
            </summary>
            <param name="name">The name to tes for.</param>
            <returns><see langword="true"/> if <paramref name="name"/> is registered with the <see cref="T:SheetWorx.AddinFunctionCollection"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.AddinFunctionCollection.Register(System.String)">
            <summary>
            Registers the <paramref name="name"/> of an add-in function.
            </summary>
            <param name="name">The name of the add-in function to register.</param>
        </member>
        <member name="M:SheetWorx.AddinFunctionCollection.Deregister(System.String)">
            <summary>
            Deregisters the <paramref name="name"/> of an add-in function.
            </summary>
            <param name="name">The name of the add-in function to deregister.</param>
        </member>
        <member name="M:SheetWorx.AddinFunctionCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.BPlusTree.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:SheetWorx.CellTable.Tree.BPlusTree"/> instance.
            </summary>
            <param name="maximumKeysPerNode"></param>
        </member>
        <member name="P:SheetWorx.CellTable.Tree.BPlusTree.MaxAllocatedRow">
            <summary>
            Gets the maximum allocated row in the tree.
            </summary>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.BPlusTree.GetNewRoot(SheetWorx.CellTable.Tree.INode,SheetWorx.CellTable.Tree.INode,SheetWorx.CellTable.CellBlockRange)">
            <summary>
            Creates a new root node with the two provided nodes as children.
            </summary>
            <param name="child1">The first leaf node.</param>
            <param name="child2">The second leaf node.</param>
            <param name="key">The single key.</param>
            <returns>The newly created internal node which is now the root of the tree.</returns>
            <remarks>The only situation in which this should be called is when the existing root of the tree splits.</remarks>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.BPlusTree.GetBlockInfoForRow(SheetWorx.Core.RowIndex)">
            <summary>
            Gets the block info for the given row. If the tree does not currently extend to the given row, it is extended so that it does.
            </summary>
            <param name="row">The index of the row for which the block info is being requested.</param>
            <returns>The <see cref="T:SheetWorx.CellTable.BlockInfo"/> for the requested <paramref name="row"/>.</returns>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.BPlusTree.ExtendToRow(SheetWorx.Core.RowIndex)">
            <summary>
            Extends the tree to the given row.
            </summary>
            <param name="row">The row to which the tree should be extended.</param>
            <remarks>
            <para>If the tree already extends to or beyond <paramref name="row"/>, no action is taken.</para>
            <para>If the last range in the tree is smaller than the maximum allowed size, this range is extended as far as necessary, up to the maximum allowed size.</para>
            <para>If the tree still does not extend to <paramref name="row"/>, additional blocks are added as required, with the final added block being the minimum size necessary.</para>
            </remarks>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.BPlusTree.ShiftRangesAfter(SheetWorx.Core.RowIndex,System.Int32)">
            <summary>
            Shifts all cell block ranges which have a first row after or equal to <paramref name="firstRowToShift"/> by <paramref name="offset"/> rows.
            </summary>
            <param name="firstRowToShift">The <see cref="T:SheetWorx.Core.RowIndex"/> of the first row to be shifted.</param>
            <param name="offset">The number of row by which to shift any affected cell block ranges.</param>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.InternalNode.InsertNode(SheetWorx.CellTable.CellBlockRange,SheetWorx.CellTable.Tree.INode)">
            <summary>
            Inserts a new child node into this node. This is called by a node when it splits.
            </summary>
            <param name="range">The key for the node being added.</param>
            <param name="child">The node to be added.</param>
            <remarks>
            <para><paramref name="range"/> is the lowest range existing in the node being added (if it is a leaf node) or in leaf nodes under the node being added (if it is an internal node).</para>
            <para>When the node is full it must be split. In this scenario, the middle key is promoted to the parent node, with a pointer to the new node.</para>
            <para>When all is complete, we want MinimumKeysPerNode keys in the existing node and MaximumKeysPerNode - MinimumKeysPerNode in the new node (with one promoted key).</para>
            <para>First of all we copy enough keys to the new node such that once we've done the insertion, there will be MinimumKeysPerNode + 1 keys in the original node.
            The number copied depends on whether the insertion will be into the existing or new node.</para>
            </remarks>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.LeafNode.#ctor(SheetWorx.CellTable.Tree.BPlusTree,SheetWorx.CellTable.CellBlockRange[],System.Int32[],SheetWorx.CellTable.Tree.LeafNode,SheetWorx.CellTable.Tree.LeafNode)">
            <summary>
            Initializes a new <see cref="T:SheetWorx.CellTable.Tree.LeafNode"/> instance in the specific scenario of a full leaf node splitting because of an insertion.
            </summary>
            <param name="owner">The tree which owns the new node.</param>
            <param name="keys">The keys of the node which has split.</param>
            <param name="blockIndices">The block indices of the node which has split.</param>
            <param name="next">The leaf node which is next after the new node, or <see langword="null"/> if the new node is the last leaf node.</param>
            <param name="previous">The leaf node which is prior to the new node, i.e. the node which has split.</param>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.LeafNode.Split">
            <summary>
            Splits this node into two nodes. This is called when a new range is being inserted but the node is full.
            </summary>
            <returns>The newly created <see cref="T:SheetWorx.CellTable.Tree.LeafNode"/>.</returns>
        </member>
        <member name="M:SheetWorx.CellTable.Tree.LeafNode.GetInsertionPoint(SheetWorx.Core.RowIndex)">
            <summary>
            Gets the index at which a block containing the given row should be inserted.
            </summary>
            <param name="row">A row contained by the block being inserted.</param>
            <returns>The index at which the insertion should be made.</returns>
        </member>
        <member name="M:SheetWorx.CellTable.ColumnCollection.Insert(SheetWorx.Core.ColumnIndex,System.Int32)">
            <summary>
            Inserts the given number of columns into the cell table at the given insertion point.
            </summary>
            <param name="insertionPoint">The index of the column before which the new column(s) should be inserted.</param>
            <param name="count">The number of columns to be inserted.</param>
        </member>
        <member name="M:SheetWorx.CellTable.ColumnCollection.Delete(SheetWorx.Core.ColumnIndex,System.Int32)">
            <summary>
            Deletes the given number of columns from the cell table at the given deletion point.
            </summary>
            <param name="deletionPoint">The index of the first column to be deleted.</param>
            <param name="count">The number of columns to be deleted.</param>
        </member>
        <member name="T:SheetWorx.CellTable.CellBlockRange">
            <summary>
            
            </summary>
            <remarks>
            2 MSb unused, then
            20 represent 0-based index of first row in range, then
            10 LSb represent end offset of range.
            </remarks>
        </member>
        <member name="T:SheetWorx.Core.NamespaceDoc">
            <summary>
            Contains core classes and structures which are used throughout the SheetWorx API, such as <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Core.Int32NumberFormatExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Int32"/> related to number format IDs.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.Int32NumberFormatExtensions.IsValidNumberFormatId(System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> is a valid number format ID.
            </summary>
            <param name="value">The number to test for validity as a number format ID.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid number format ID, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.Int32NumberFormatExtensions.IsValidBuiltInNumberFormatId(System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> is a valid built-in number format ID.
            </summary>
            <param name="value">The number to test for validity as a built-in number format ID.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid built-in number format ID, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.Int32NumberFormatExtensions.IsValidLocaleSpecificBuiltInNumberFormatId(System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> is a valid locale-specific built-in number format ID.
            </summary>
            <param name="value">The number to test for validity as a locale-specific built-in number format ID.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid locale-specific built-in number format ID, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.Int32NumberFormatExtensions.IsValidCustomNumberFormatId(System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> is a valid custom number format ID.
            </summary>
            <param name="value">The number to test for validity as a custom number format ID.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid custom number format ID, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.ConformanceClass">
            <summary>
            Specifies the ISO/IEC 29500 document conformance class of a workbook opened from or saved to an Office Open XML format file. 
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConformanceClass.Strict">
            <summary>Specifies a document of conformance class Office Open XML Strict.</summary>
        </member>
        <member name="F:SheetWorx.Core.ConformanceClass.Transitional">
            <summary>Specifies a document of conformance class Office Open XML Transitional.</summary>
        </member>
        <member name="T:SheetWorx.Core.FileType">
            <summary>
            Specifies the file format of a workbook which was opened from or has been saved to a file.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.FileType.Csv">
            <summary>Specifies the CSV file format.</summary>
        </member>
        <member name="F:SheetWorx.Core.FileType.Xlsb">
            <summary>Specifies the XLSB file format.</summary>
        </member>
        <member name="F:SheetWorx.Core.FileType.Xlsm">
            <summary>Specifies the XLSM file format.</summary>
        </member>
        <member name="F:SheetWorx.Core.FileType.Xlsx">
            <summary>Specifies the XLSX file format.</summary>
        </member>
        <member name="T:SheetWorx.Core.StringRun">
            <summary>
            Represents a run of text with identical font properties in a <see cref="T:SheetWorx.Core.RichString"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.StringRun.StartIndex">
            <summary>
            Gets the zero-based index of the character at which this <see cref="T:SheetWorx.Core.StringRun"/> begins.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.StringRun.EndIndex">
            <summary>
            Gets the zero-based index of the character at which this <see cref="T:SheetWorx.Core.StringRun"/> ends.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.StringRun.Equals(SheetWorx.Core.StringRun)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.StringRun"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.StringRun"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents a string run with the same start index and font properties, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.StringRun.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.StringRun.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Core.StringRun"/>.
            </summary>
            <returns>
            The string representation of the <see cref="T:SheetWorx.Core.StringRun"/>.
            This is the substring of the raw text of the <see cref="T:SheetWorx.Core.RichString"/> to which the <see cref="T:SheetWorx.Core.StringRun"/> relates.
            </returns>
        </member>
        <member name="M:SheetWorx.Core.StringRun.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.StringRun.op_Equality(SheetWorx.Core.StringRun,SheetWorx.Core.StringRun)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.StringRun"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.StringRun"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.StringRun"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.StringRun"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.StringRun.op_Inequality(SheetWorx.Core.StringRun,SheetWorx.Core.StringRun)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.StringRun"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.StringRun"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.StringRun"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.StringRun"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.CalculationMode">
            <summary>
            Enumeration of workbook calculation modes.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CalculationMode.Manual">
            <summary>
            Specifies Manual calculation mode.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CalculationMode.Automatic">
            <summary>
            Specifies Automatic calculation mode.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CalculationMode.SemiAutomatic">
            <summary>
            Specifies Semi-automatic calculation mode.
            </summary>
        </member>
        <member name="T:SheetWorx.Core.CellValue">
            <summary>
            Represents the value in a <see cref="T:SheetWorx.Sheets.Worksheet"/> cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.CellValue.Type">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.ConstantType"/> of this <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.Empty">
            <summary>
            The <see cref="T:SheetWorx.Core.CellValue"/> of an empty cell.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.EmptyString">
            <summary>
            A text <see cref="T:SheetWorx.Core.CellValue"/> representing the empty string.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.True">
            <summary>
            A boolean <see cref="T:SheetWorx.Core.CellValue"/> with a value of <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.False">
            <summary>
            A boolean <see cref="T:SheetWorx.Core.CellValue"/> with a value of <see langword="false"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorDivByZero">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #DIV/0.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorGettingData">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #GETTING_DATA.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorNa">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #N/A.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorName">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #NAME?.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorNull">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #NULL!.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorNum">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #NUM!.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorRef">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #REF!.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.CellValue.ErrorValue">
            <summary>
            An error <see cref="T:SheetWorx.Core.CellValue"/> with a value of #VALUE!.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Explicit(SheetWorx.Core.CellValue)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:SheetWorx.Core.CellValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Core.CellValue"/> to convert to a <see cref="T:System.Double"/>.</param>
            <returns>The <see cref="T:System.Double"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Explicit(SheetWorx.Core.CellValue)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:SheetWorx.Core.CellValue"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Core.CellValue"/> to convert to a <see cref="T:System.Boolean"/>.</param>
            <returns>The <see cref="T:System.Boolean"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Explicit(SheetWorx.Core.CellValue)~SheetWorx.Core.ErrorType">
            <summary>
            Performs an explicit conversion from <see cref="T:SheetWorx.Core.CellValue"/> to <see cref="T:SheetWorx.Core.ErrorType"/>.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Core.CellValue"/> to convert to a <see cref="T:SheetWorx.Core.ErrorType"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.ErrorType"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Implicit(System.Boolean)~SheetWorx.Core.CellValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> to convert to a <see cref="T:SheetWorx.Core.CellValue"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellValue"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Implicit(System.Double)~SheetWorx.Core.CellValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to convert to a <see cref="T:SheetWorx.Core.CellValue"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellValue"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Implicit(System.String)~SheetWorx.Core.CellValue">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to convert to a <see cref="T:SheetWorx.Core.CellValue"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellValue"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Implicit(SheetWorx.Core.RichString)~SheetWorx.Core.CellValue">
            <summary>
            Performs an implicit conversion from <see cref="T:SheetWorx.Core.RichString"/> to <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Core.RichString"/> to convert to a <see cref="T:SheetWorx.Core.CellValue"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellValue"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Implicit(SheetWorx.Core.ErrorType)~SheetWorx.Core.CellValue">
            <summary>
            Performs an implicit conversion from <see cref="T:SheetWorx.Core.ErrorType"/> to <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Core.ErrorType"/> to convert to a <see cref="T:SheetWorx.Core.CellValue"/>.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellValue"/> result of the conversion.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Equality(SheetWorx.Core.CellValue,SheetWorx.Core.CellValue)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.CellValue"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.CellValue"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellValue"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellValue"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.op_Inequality(SheetWorx.Core.CellValue,SheetWorx.Core.CellValue)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.CellValue"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.CellValue"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellValue"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellValue"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.Equals(SheetWorx.Core.CellValue)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.CellValue"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.CellValue"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same cell value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.CellValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.CellValue.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.CellValue.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Core.CellValue"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.ConstantType">
            <summary>
            Enumeration of possible types for a <see cref="T:SheetWorx.Core.CellValue"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.Empty">
            <summary>
            Speicifies an empty cell, which has no value.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.Number">
            <summary>
            Specifies a numeric value.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.Boolean">
            <summary>
            Specifies a boolean value, either TRUE or FALSE.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.Text">
            <summary>
            Specifies a text value, which may be either a <see cref="T:System.String"/> or a <see cref="T:SheetWorx.Core.RichString"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.Error">
            <summary>
            Specifies an error value.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ConstantType.MissingArgument">
            <summary>
            Specifies a missing argument in a function call.
            </summary>
        </member>
        <member name="T:SheetWorx.Core.ErrorType">
            <summary>
            Enumeration of error values which a cell can contain.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.Null">
            <summary>
            Specifies a #NULL! error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.DivisionByZero">
            <summary>
            Specifies a #DIV/0 error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.Value">
            <summary>
            Specifies a #VALUE! error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.Reference">
            <summary>
            Specifies a #REF! error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.Name">
            <summary>
            Specifies a #NAME? error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.Number">
            <summary>
            Specifies a #NUM! error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.NotAvailable">
            <summary>
            Specifies a #N/A error.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ErrorType.GettingData">
            <summary>
            Specifies a #GETTING_DATA error.
            </summary>
        </member>
        <member name="T:SheetWorx.Core.RichString">
            <summary>
            Represents a rich text string, which may use different formatting for different ranges of characters within it.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.RichString.Runs">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.StringRunCollection"/> containing all of the string runs for the <see cref="T:SheetWorx.Core.RichString"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.RichString.Equals(SheetWorx.Core.RichString)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.RichString"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.RichString"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents a rich string with identical text and runs, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RichString.ToString">
            <summary>
            Returns the raw text of the <see cref="T:SheetWorx.Core.RichString"/>.
            </summary>
            <returns>The raw text of the <see cref="T:SheetWorx.Core.RichString"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RichString.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.RichString.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.RichString.op_Equality(SheetWorx.Core.RichString,SheetWorx.Core.RichString)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RichString"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.RichString"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RichString"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RichString"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RichString.op_Inequality(SheetWorx.Core.RichString,SheetWorx.Core.RichString)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RichString"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.RichString"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RichString"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RichString"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.StringRunCollection">
            <summary>
            Represents the collection of string runs which belong to a <see cref="T:SheetWorx.Core.RichString"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.StringRunCollection.Count">
            <summary>
            Gets the count of string runs in the <see cref="T:SheetWorx.Core.StringRunCollection"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.Equals(SheetWorx.Core.StringRunCollection)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.StringRunCollection"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.StringRunCollection"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> contains the same number of string runs and each string run is equal to its counterpart, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.op_Equality(SheetWorx.Core.StringRunCollection,SheetWorx.Core.StringRunCollection)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.StringRunCollection"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.StringRunCollection"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.StringRunCollection"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.StringRunCollection"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.StringRunCollection.op_Inequality(SheetWorx.Core.StringRunCollection,SheetWorx.Core.StringRunCollection)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.StringRunCollection"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.StringRunCollection"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.StringRunCollection"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.StringRunCollection"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.AreaAddress">
            <summary>
            Represents the address of a single rectangular area of worksheet cells.
            </summary>
            <remarks>
            An <see cref="T:SheetWorx.Core.AreaAddress"/> does not relate to the cells on any particular worksheet, it simply describes the address of an area of cells in a general sense.
            </remarks>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.#ctor(SheetWorx.Core.CellAddress,SheetWorx.Core.CellAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Core.AreaAddress"/> class which represents the rectangular area of cells described by <paramref name="fromCell"/> and <paramref name="toCell"/>.
            </summary>
            <remarks>
            <paramref name="fromCell"/> and <paramref name="toCell"/> describe opposite corners of the rectangular area of cells, either top-left and bottom-right or bottom-left and top-right.
            </remarks>
            <param name="fromCell">The <see cref="T:SheetWorx.Core.CellAddress"/> of one corner of the rectangular area of cells.</param>
            <param name="toCell">The <see cref="T:SheetWorx.Core.CellAddress"/> of the corner of the rectangular area of cells opposite to <paramref name="fromCell"/>.</param>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.TopLeftCell">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the top left of the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.BottomRightCell">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the bottom right of the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.BottomLeftCell">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the bottom left of the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.TopRightCell">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the top right of the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.CellCount">
            <summary>
            Gets the number of cells contained in the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.ColumnCount">
            <summary>
            Gets the number of columns spanned by the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.FirstColumn">
            <summary>
            Gets the index of the left-most column included in the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.FirstRow">
            <summary>
            Gets the index of the top-most row included in the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.IsEntireColumns">
            <summary>
            Returns <see langword="true"/> if the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/> spans one or more entire columns, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.IsEntireRows">
            <summary>
            Returns <see langword="true"/> if the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/> spans one or more entire rows, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.IsSingleCell">
            <summary>
            Returns <see langword="true"/> if the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/> consists of a single cell, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.LastColumn">
            <summary>
            Gets the index of the right-most column included in the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.LastRow">
            <summary>
            Gets the index of the bottom-most row included in the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.AreaAddress.RowCount">
            <summary>
            Gets the number of rows spanned by the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.Equals(SheetWorx.Core.AreaAddress)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.AreaAddress"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.AreaAddress"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same area of worksheet cells, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.Overlaps(SheetWorx.Core.AreaAddress)">
            <summary>
            Tests whether the <paramref name="other"/> <see cref="T:SheetWorx.Core.AreaAddress"/> has any cells in common with this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.AreaAddress"/> to test for common cells.</param>
            <returns><see langword="true"/> if this <see cref="T:SheetWorx.Core.AreaAddress"/> has cells in common with <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.Contains(SheetWorx.Core.CellAddress)">
            <summary>
            Tests whether <paramref name="cellAddress"/> refers to a cell which is part of the area represented by this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
            <param name="cellAddress">The <see cref="T:SheetWorx.Core.CellAddress"/> to test for containment.</param>
            <returns><see langword="true"/> if this <see cref="T:SheetWorx.Core.AreaAddress"/> includes the cell represented by <paramref name="cellAddress"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.Contains(SheetWorx.Core.AreaAddress)">
            <summary>
            Tests whether the <paramref name="other"/> <see cref="T:SheetWorx.Core.AreaAddress"/> only includes cells which are also part of this <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.AreaAddress"/> to test for containment.</param>
            <returns><see langword="true"/> if this <see cref="T:SheetWorx.Core.AreaAddress"/> includes all cells which are part of <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.IntersectionWith(SheetWorx.Core.AreaAddress)">
            <summary>
            Calculates the intersection of this <see cref="T:SheetWorx.Core.AreaAddress"/> with the <paramref name="other"/> <see cref="T:SheetWorx.Core.AreaAddress"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.AreaAddress"/> to calculate the intersection of this <see cref="T:SheetWorx.Core.AreaAddress"/> with.</param>
            <returns>If this <see cref="T:SheetWorx.Core.AreaAddress"/> intersects <paramref name="other"/>, an <see cref="T:SheetWorx.Core.AreaAddress"/> representing the intersection, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.ToA1Address">
            <summary>
            Returns the string representation of the address of this <see cref="T:SheetWorx.Core.AreaAddress"/>, in A1-style notation.
            </summary>
            <returns>The string representation of the address of this <see cref="T:SheetWorx.Core.AreaAddress"/>, in A1-style notation.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.MinimumBoundingArea(SheetWorx.Core.AreaAddress,SheetWorx.Core.AreaAddress)">
            <summary>
            Finds the smallest area which includes the whole of two areas, <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.AreaAddress"/> which must be contained by the result.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.AreaAddress"/> which must be contained by the result.</param>
            <returns>An <see cref="T:SheetWorx.Core.AreaAddress"/> representing the smallest area which includes the whole of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.op_Equality(SheetWorx.Core.AreaAddress,SheetWorx.Core.AreaAddress)">
            <summary>
            Tests <see cref="T:SheetWorx.Core.AreaAddress"/> <paramref name="x"/> and <see cref="T:SheetWorx.Core.AreaAddress"/> <paramref name="y"/> for equality.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.AreaAddress"/> to test for equality.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.AreaAddress"/> to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to exactly the same area of cells, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.AreaAddress.op_Inequality(SheetWorx.Core.AreaAddress,SheetWorx.Core.AreaAddress)">
            <summary>
            Tests <see cref="T:SheetWorx.Core.AreaAddress"/> <paramref name="x"/> and <see cref="T:SheetWorx.Core.AreaAddress"/> <paramref name="y"/> for inequality.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.AreaAddress"/> to test for inequality.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.AreaAddress"/> to test for inequality.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> do not refer to exactly the same area of cells, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.CellAddress">
            <summary>
            Represents the address of a single worksheet cell.
            </summary>
            <remarks>
            A <see cref="T:SheetWorx.Core.CellAddress"/> does not relate to a cell on any particular worksheet, it simply describes the address of a cell in a general sense.
            </remarks>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.#ctor(SheetWorx.Core.RowIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Core.CellAddress"/> struct which refers to the cell with the given <paramref name="row"/> and <paramref name="column"/>.
            </summary>
            <param name="row">The row of the cell.</param>
            <param name="column">The column of the cell.</param>
        </member>
        <member name="P:SheetWorx.Core.CellAddress.Column">
            <summary>
            Gets the column of the cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Core.CellAddress.Row">
            <summary>
            Gets the row of the cell.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.Equals(SheetWorx.Core.CellAddress)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.CellAddress"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.CellAddress"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same cell address, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.TopLeft(SheetWorx.Core.CellAddress,SheetWorx.Core.CellAddress)">
            <summary>
            Returns the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the top left of the rectangular area described by <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="x"/> and a <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellAddress"/> describing a corner of a rectangular area of cells.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellAddress"/> describing a corner of a rectangular area of cells.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the top left of the rectangular area described by <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.BottomRight(SheetWorx.Core.CellAddress,SheetWorx.Core.CellAddress)">
            <summary>
            Returns the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the bottom right of the rectangular area described by <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="x"/> and a <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellAddress"/> describing a corner of a rectangular area of cells.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellAddress"/> describing a corner of a rectangular area of cells.</param>
            <returns>The <see cref="T:SheetWorx.Core.CellAddress"/> of the cell at the bottom right of the rectangular area described by <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.op_Equality(SheetWorx.Core.CellAddress,SheetWorx.Core.CellAddress)">
            <summary>
            Tests <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="x"/> and <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="y"/> for equality.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellAddress"/> to test for equality.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellAddress"/> to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same cell, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.op_Inequality(SheetWorx.Core.CellAddress,SheetWorx.Core.CellAddress)">
            <summary>
            Tests <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="x"/> and <see cref="T:SheetWorx.Core.CellAddress"/> <paramref name="y"/> for inequality.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.CellAddress"/> to test for inequality.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.CellAddress"/> to test for inequality.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> do not refer to the same cell, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.CellAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Core.ColumnIndex">
            <summary>
            Represents the zero-based index of a worksheet column.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ColumnIndex.MaxValue">
            <summary>
            The maximum allowed <see cref="T:SheetWorx.Core.ColumnIndex"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.ColumnIndex.MinValue">
            <summary>
            The minimum allowed <see cref="T:SheetWorx.Core.ColumnIndex"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Core.ColumnIndex"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Core.ColumnIndex"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_Implicit(SheetWorx.Core.ColumnIndex)~System.Int32">
            <summary>
            Implicitly converts a <see cref="T:SheetWorx.Core.ColumnIndex"/> to the equivalent <see cref="T:System.Int32"/> value.
            </summary>
            <param name="index">The <see cref="T:SheetWorx.Core.ColumnIndex"/> to convert.</param>
            <returns>The <see cref="T:System.Int32"/> equivalent of <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_Implicit(System.Int32)~SheetWorx.Core.ColumnIndex">
            <summary>
            Implicitly converts a <see cref="T:System.Int32"/> to the equivalent <see cref="T:SheetWorx.Core.ColumnIndex"/> value.
            </summary>
            <param name="index">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The <see cref="T:SheetWorx.Core.ColumnIndex"/> equivalent of <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_GreaterThan(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is greater than <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is greater than <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_LessThan(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is less than <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_GreaterThanOrEqual(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is greater than or equal to <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is greater than or equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_LessThanOrEqual(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is less than or equal to <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is less than or equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_Equality(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.op_Inequality(SheetWorx.Core.ColumnIndex,SheetWorx.Core.ColumnIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.ColumnIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.ColumnIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.Equals(SheetWorx.Core.ColumnIndex)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.ColumnIndex"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.ColumnIndex"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same column index, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.ColumnIndex.IsValid(System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> is a valid <see cref="T:SheetWorx.Core.ColumnIndex"/>.
            </summary>
            <param name="value">The value to test for validity as a <see cref="T:SheetWorx.Core.ColumnIndex"/>.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid <see cref="T:SheetWorx.Core.ColumnIndex"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.RowIndex">
            <summary>
            Represents the zero-based index of a worksheet row.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.RowIndex.MaxValue">
            <summary>
            The maximum allowed <see cref="T:SheetWorx.Core.RowIndex"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.RowIndex.MinValue">
            <summary>
            The minimum allowed <see cref="T:SheetWorx.Core.RowIndex"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Core.RowIndex"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Core.RowIndex"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_Implicit(SheetWorx.Core.RowIndex)~System.Int32">
            <summary>
            Implicitly converts a <see cref="T:SheetWorx.Core.RowIndex"/> to the equivalent <see cref="T:System.Int32"/> value.
            </summary>
            <param name="index">The <see cref="T:SheetWorx.Core.RowIndex"/> to convert.</param>
            <returns>The <see cref="T:System.Int32"/> equivalent of <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_Implicit(System.Int32)~SheetWorx.Core.RowIndex">
            <summary>
            Implicitly converts a <see cref="T:System.Int32"/> to the equivalent <see cref="T:SheetWorx.Core.RowIndex"/> value.
            </summary>
            <param name="index">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The <see cref="T:SheetWorx.Core.RowIndex"/> equivalent of <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_GreaterThan(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is greater than <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is greater than <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_LessThan(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is less than <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is less than <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_GreaterThanOrEqual(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is greater than or equal to <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is greater than or equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_LessThanOrEqual(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is less than or equal to <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is less than or equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_Equality(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.op_Inequality(SheetWorx.Core.RowIndex,SheetWorx.Core.RowIndex)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Core.RowIndex"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Core.RowIndex"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.Equals(SheetWorx.Core.RowIndex)">
            <summary>
            Compares the <see cref="T:SheetWorx.Core.RowIndex"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Core.RowIndex"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same row index, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.IsValid(System.Int64)">
            <summary>
            Determines whether <paramref name="value"/> is a valid <see cref="T:SheetWorx.Core.RowIndex"/>.
            </summary>
            <param name="value">The value to test for validity as a <see cref="T:SheetWorx.Core.RowIndex"/>.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is a valid <see cref="T:SheetWorx.Core.RowIndex"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Core.RowIndex.TryParseFromString(System.String,SheetWorx.Core.RowIndex@)">
            <summary>
            Tries to parse <paramref name="value"/> as a <see cref="T:SheetWorx.Core.RowIndex"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to attempt to parse.</param>
            <param name="rowIndex"></param>
            <returns><see langword="true"/> if <paramref name="value"/> is successfully parsed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Core.Visibility">
            <summary>
            Specifies the visibility of a sheet or window.
            </summary>
        </member>
        <member name="F:SheetWorx.Core.Visibility.Visible">
            <summary>Indicates that the sheet or window is visible.</summary>
        </member>
        <member name="F:SheetWorx.Core.Visibility.Hidden">
            <summary>Indicates that the sheet or window is hidden.</summary>
        </member>
        <member name="F:SheetWorx.Core.Visibility.VeryHidden">
            <summary>Indicates that the sheet or window is hidden and that the Excel GUI does not display the sheet or window in the list of hidden sheets or windows in the Unhide dialog box.</summary>
        </member>
        <member name="T:SheetWorx.DefinedNames.NamespaceDoc">
            <summary>
            Contains classes relating to spreadsheet defined names.
            </summary>
        </member>
        <member name="T:SheetWorx.DefinedNames.DefinedName">
            <summary>
            Represents a single defined name scoped to a <see cref="T:SheetWorx.Workbook"/> or to a single <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.DefinedName.BuiltIn">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> is built-in or not.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.DefinedName.Comment">
            <summary>
            Gets or sets the comment associated with the <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.DefinedName.Name">
            <summary>
            Gets or sets the name of the <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.DefinedName.RefersTo">
            <summary>
            Gets or sets the formula to which the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> refers.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.DefinedName.Visible">
            <summary>
            Gets or sets a boolean value indicating whether the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> is visible.
            </summary>
        </member>
        <member name="M:SheetWorx.DefinedNames.DefinedName.Delete">
            <summary>
            Deletes the <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.DefinedNames.DefinedName.IsValidComment(System.String)">
            <summary>
            Helper method which determines whether a string is valid as the comment for a <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.
            </summary>
            <param name="textToCheck">The text whose suitability as a <see cref="T:SheetWorx.DefinedNames.DefinedName"/> comment is to be verified.</param>
            <returns><see langword="true"/> if <paramref name="textToCheck"/> is valid as a <see cref="T:SheetWorx.DefinedNames.DefinedName"/> comment, otherwise <see langword="false"/>.</returns>
            <remarks>Comments for defined names can be any string with a length less than or equal to 255 characters, including an empty string, or <see langword="null"/>.</remarks>
        </member>
        <member name="M:SheetWorx.DefinedNames.DefinedName.IsValidName(System.String)">
            <summary>
            Helper method which determines whether a string is valid as the name for a <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.
            </summary>
            <param name="textToCheck">The text whose suitability as the name for a <see cref="T:SheetWorx.DefinedNames.DefinedName"/> is to be verified.</param>
            <returns><see langword="true"/> if <paramref name="textToCheck"/> is valid as the name of a <see cref="T:SheetWorx.DefinedNames.DefinedName"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.DefinedNames.NameCollection">
            <summary>
            Represents the collection of defined names which are scoped to a <see cref="T:SheetWorx.Workbook"/> or to a single <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
            <remarks>
            Defined names can be scoped to an entire <see cref="T:SheetWorx.Workbook"/>, or they can be scoped to a single <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            The <see cref="T:SheetWorx.Workbook"/> has a <see cref="T:SheetWorx.DefinedNames.NameCollection"/> which contains all those defined names scoped to the entire <see cref="T:SheetWorx.Workbook"/>.
            Similarly, each <see cref="T:SheetWorx.Sheets.Worksheet"/> has a <see cref="T:SheetWorx.DefinedNames.NameCollection"/> which contains just the defined names scoped to that <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.DefinedNames.NameCollection.Count">
            <summary>
            Gets the count of defined names in the <see cref="T:SheetWorx.DefinedNames.NameCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.DefinedNames.NameCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.DefinedNames.NameCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> to get.</param>
            <returns>The <see cref="T:SheetWorx.DefinedNames.DefinedName"/> at <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or is greater than or equal to the count of defined names in the <see cref="T:SheetWorx.DefinedNames.NameCollection"/>.</exception>
        </member>
        <member name="P:SheetWorx.DefinedNames.NameCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.DefinedNames.DefinedName"/> to get.</param>
            <returns>The <see cref="T:SheetWorx.DefinedNames.DefinedName"/> with the given <paramref name="name"/>.</returns>
        </member>
        <member name="M:SheetWorx.DefinedNames.NameCollection.Contains(System.String)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:SheetWorx.DefinedNames.NameCollection"/> contains a <see cref="T:SheetWorx.DefinedNames.DefinedName"/> with the given <paramref name="name"/>, otherwise <see langword="false"/>.
            </summary>
            <param name="name">Specifies the name to check.</param>
            <returns><see langword="true"/> if the <see cref="T:SheetWorx.DefinedNames.NameCollection"/> contains a <see cref="T:SheetWorx.DefinedNames.DefinedName"/> with the given <paramref name="name"/>, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:SheetWorx.DefinedNames.NameCollection.Add(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:SheetWorx.DefinedNames.DefinedName"/> to the <see cref="T:SheetWorx.DefinedNames.NameCollection"/> with the given <paramref name="name"/> and which refers to the given <paramref name="formula"/>.
            </summary>
            <param name="name">The name to be given to the new <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.</param>
            <param name="formula">The formula to which the new <see cref="T:SheetWorx.DefinedNames.DefinedName"/> should refer.</param>
            <returns>The newly added <see cref="T:SheetWorx.DefinedNames.DefinedName"/>.</returns>
        </member>
        <member name="M:SheetWorx.DefinedNames.NameCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Engine.CellId.GetHashCode">
            <summary>
            16 bits for row - no clashes in first 65536 rows
            8 bits for column - no clashes in first 256 columns
            8 bits for worksheet
            Memory limitations mean clashes are unlikely to occur in more than one dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.NamespaceDoc">
            <summary>
            Contains classes and structures relating to spreadsheet cell formatting colors.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.Color">
            <summary>
            Represents an ARGB color.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> struct using the provided scRGB channel levels.
            </summary>
            <param name="scAlpha">The scRGB alpha channel level.</param>
            <param name="scRed">The scRGB red channel level.</param>
            <param name="scGreen">The scRGB green channel level.</param>
            <param name="scBlue">The scRGB blue channel level.</param>
            <remarks>
            scRGB channel levels fall within the range 0 &#x2264; x &#x2264; 1. If a channel level outside this range is provided it will be clamped to this range.
            </remarks>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> struct using the specified sRGB channel levels. A level of 255 (fully opaque) is used for the alpha channel.
            </summary>
            <param name="sRed">The sRGB red channel level.</param>
            <param name="sGreen">The sRGB green channel level.</param>
            <param name="sBlue">The sRGB blue channel level.</param>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> struct using the specified sRGB channel levels.
            </summary>
            <param name="sAlpha">The sRGB alpha channel level.</param>
            <param name="sRed">The sRGB red channel level.</param>
            <param name="sGreen">The sRGB green channel level.</param>
            <param name="sBlue">The sRGB blue channel level.</param>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.Alpha">
            <summary>
            Gets the sRGB level of the alpha channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.Blue">
            <summary>
            Gets the sRGB level of the blue channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.Green">
            <summary>
            Gets the sRGB level of the green channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.Red">
            <summary>
            Gets the sRGB level of the red channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.ScAlpha">
            <summary>
            Gets the scRGB level of the alpha channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.ScBlue">
            <summary>
            Gets the scRGB level of the blue channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.ScGreen">
            <summary>
            Gets the scRGB level of the green channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.Color.ScRed">
            <summary>
            Gets the scRGB level of the red channel.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.Equals(SheetWorx.Formatting.Colors.Color)">
            <summary>
            Compares the <see cref="T:SheetWorx.Formatting.Colors.Color"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Formatting.Colors.Color"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same color, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.ToString">
            <summary>
            Returns a string consisting of the hexadecimal encoding of the four channel octets of this <see cref="T:SheetWorx.Formatting.Colors.Color"/>.
            </summary>
            <returns>A string consisting of the hexadecimal encoding of the four channel octets of this <see cref="T:SheetWorx.Formatting.Colors.Color"/> in ARGB order.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.op_Equality(SheetWorx.Formatting.Colors.Color,SheetWorx.Formatting.Colors.Color)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Colors.Color"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Formatting.Colors.Color"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Colors.Color"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Colors.Color"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.op_Inequality(SheetWorx.Formatting.Colors.Color,SheetWorx.Formatting.Colors.Color)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Colors.Color"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Formatting.Colors.Color"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Colors.Color"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Colors.Color"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.SRgbToScRgb(System.Byte)">
            <summary>
            Converts an sRGB channel level to its equivalent scRGB level.
            </summary>
            <param name="value">The sRGB channel level to be converted.</param>
            <returns>The scRGB equivalent of <paramref name="value"/></returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.Color.ScRgbTosRgb(System.Single)">
            <summary>
            Converts an scRGB channel level to its equivalent sRGB level.
            </summary>
            <param name="value">The scRGB channel level to be converted.</param>
            <returns>The sRGB equivalent of <paramref name="value"/></returns>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.SystemColors">
            <summary>
            Contains instances of <see cref="T:SheetWorx.Formatting.Colors.Color"/> which represent system colours.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ActiveBorder">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the active window's border.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ActiveCaption">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour of the active window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ActiveCaptionText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the text in the active window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.AppWorkspace">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the application workspace.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ButtonFace">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the face colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ButtonHighlight">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the highlight colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ButtonShadow">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the shadow colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Control">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the face colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ControlDark">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the shadow colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ControlDarkDark">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the dark shadow colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ControlLight">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the light colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ControlLightLight">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the highlight colour of a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ControlText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of text in a three-dimensional display element.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Desktop">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the desktop.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.GradientActiveCaption">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the right side colour in the gradient of an active window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.GradientInactiveCaption">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the right side colour in the gradient of an inactive window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.GrayText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of disabled text.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Highlight">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour of selected items.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.HighlightText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the text of selected items.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.HotTrack">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour used to designate a hot-tracked item.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.InactiveBorder">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of an inactive window's border.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.InactiveCaption">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour of an inactive window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.InactiveCaptionText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the text of an inactive window's title bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Info">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour for tooltips.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.InfoText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the text colour for tooltips.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Menu">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of a menu's background.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.MenuBar">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour for a menu bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.MenuHighlight">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour used to highlight a menu item.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.MenuText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of a menu's text.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.ScrollBar">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour of a scroll bar.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.Window">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the background colour in the client area of a window.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.WindowFrame">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of a window frame.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.SystemColors.WindowText">
            <summary>
            Gets a <see cref="T:SheetWorx.Formatting.Colors.Color"/> that is the colour of the text in the client area of a window.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.ColorPalette">
            <summary>
            Represents the palette of indexed colours belonging to a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.ColorPalette.Default">
            <summary>
            Gets an enumeration of the default <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.ColorPalette.IncludesOverrides">
            <summary>
            Gets a boolean value indicating whether any of the colours in the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> have been overridden from their defaults.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.ColorPalette.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Colors.ColorPalette.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> to get or set.</param>
            <returns></returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.ColorPalette.DefaultColor(System.Int32)">
            <summary>
            Return the default <see cref="T:SheetWorx.Formatting.Colors.Color"/> for the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index for which to return the default <see cref="T:SheetWorx.Formatting.Colors.Color"/>.</param>
            <returns>The default <see cref="T:SheetWorx.Formatting.Colors.Color"/> for the given zero-based <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.ColorPalette.IsOverridden(System.Int32)">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Formatting.Colors.Color"/> at the given zero-based <paramref name="index"/> is different to the default <see cref="T:SheetWorx.Formatting.Colors.Color"/> for that <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> to check.</param>
            <returns><see langword="true"/> if the <see cref="T:SheetWorx.Formatting.Colors.Color"/> at the given zero-based <paramref name="index"/> is different to the default <see cref="T:SheetWorx.Formatting.Colors.Color"/> for that <paramref name="index"/>, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.ColorPalette.ResetToDefault">
            <summary>
            Resets all of the colours in the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> to their default values.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.ColorPalette.ResetToDefault(System.Int32)">
            <summary>
            Resets the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> to its default <see cref="T:SheetWorx.Formatting.Colors.Color"/>.
            </summary>
            <param name="index">The zero-based index of the colour to reset.</param>
        </member>
        <member name="M:SheetWorx.Formatting.Colors.ColorPalette.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.ColorType">
            <summary>
            Enumeration of color types.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.ColorType.Direct">
            <summary>
            Specifies that a color has been set directly.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.ColorType.Theme">
            <summary>
            Specifies that a color is derived from a <see cref="T:SheetWorx.Workbook"/> <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.ColorType.Indexed">
            <summary>
            Specifies that a color is set to one of the indexed colors of the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> of a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Colors.PredefinedColors">
            <summary>
            Defines the color indices which may be used to refer to indexed colors other than those in the color palette of a workbook.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.Automatic">
            <summary>
            The color index indicating the Automatic color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.None">
            <summary>
            The color index indicating no color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemForeground">
            <summary>
            The color index indicating the system foreground color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemBackground">
            <summary>
            The color index indicating the system background color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemFrame">
            <summary>
            The color index indicating the system frame color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.System3D">
            <summary>
            The color index indicating the system 3D color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.System3DText">
            <summary>
            The color index indicating the system 3d text color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.System3DHighlight">
            <summary>
            The color index indicating the system 3d highlight color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.System3DShadow">
            <summary>
            The color index indicating the system 3d shadow color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemHighlight">
            <summary>
            The color index indicating the system highlight color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemText">
            <summary>
            The color index indicating the system text color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemScrollBar">
            <summary>
            The color index indicating the system scrollbar color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemScrollBarInverse">
            <summary>
            The color index indicating the inverse of the system scrollbar color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemWindowBackground">
            <summary>
            The color index indicating the system window background color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemWindowFrame">
            <summary>
            The color index indicating the system window frame color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemWindowText">
            <summary>
            The color index indicating the system window text color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemWindowBackground2">
            <summary>
            A second color index indicating the system background color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemNeutral">
            <summary>
            The color index indicating the system neutral color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemTooltipBackground">
            <summary>
            The color index indicating the system tooltip background color.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Colors.PredefinedColors.SystemTooltipText">
            <summary>
            The color index indicating the system tooltip text color.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.NamespaceDoc">
            <summary>
            Contains classes relating to spreadsheet styles.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.NamespaceDoc">
            <summary>
            Contains enumerations and structures relating to spreadsheet cell formatting alignment properties.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.IndentLevel">
            <summary>
            Represents the indentation level of text in a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.IndentLevel.None">
            <summary>
            An <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> representing no indentation.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.Equals(SheetWorx.Formatting.Alignment.IndentLevel)">
            <summary>
            Compares the <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same indent level, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.op_Explicit(System.Int32)~SheetWorx.Formatting.Alignment.IndentLevel">
            <summary>
            Explicitly converts a <see cref="T:System.Int32"/> to the equivalent <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> equivalent of <paramref name="value"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.op_Implicit(SheetWorx.Formatting.Alignment.IndentLevel)~System.Int32">
            <summary>
            Implicitly converts an <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to the equivalent <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to convert.</param>
            <returns>The <see cref="T:System.Int32"/> equivalent of <paramref name="value"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.op_Equality(SheetWorx.Formatting.Alignment.IndentLevel,SheetWorx.Formatting.Alignment.IndentLevel)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.op_Inequality(SheetWorx.Formatting.Alignment.IndentLevel,SheetWorx.Formatting.Alignment.IndentLevel)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.IndentLevel.IsValidIndentLevel(System.Int32)">
            <summary>
            Tests <paramref name="value"/> for validity as an <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/>.
            </summary>
            <param name="value">The number to test for validity as an <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/>.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is valid as an <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.TextRotation">
            <summary>
            Represents the orientation of text in a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.ContextDependent">
            <summary>
            Value indicating that the orientation of text should be dependent on context.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.Normal">
            <summary>
            Value indicating that text should be oriented normally, that is horizontally.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.Vertical">
            <summary>
            Value indicating that text should be oriented vertically, that is with letters oriented horizontally but positioned vertically above one another.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.Angle">
            <summary>
            Gets the angle of rotation represented by the <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.IsAngle">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> represents a text orientation which is expressed as an explicit angle.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.IsContextDependent">
            <summary>
            Gets a boolean value indicating whether the orientation of text is <see cref="P:SheetWorx.Formatting.Alignment.TextRotation.ContextDependent"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Alignment.TextRotation.IsVertical">
            <summary>
            Gets a boolean value indicating whether the orientation of text is <see cref="P:SheetWorx.Formatting.Alignment.TextRotation.Vertical"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.Equals(SheetWorx.Formatting.Alignment.TextRotation)">
            <summary>
            Compares the <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to <paramref name="other"/> for equality.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> against which to test for equality.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same text orientation, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.op_Equality(SheetWorx.Formatting.Alignment.TextRotation,SheetWorx.Formatting.Alignment.TextRotation)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> <paramref name="x"/> is equal to <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.op_Inequality(SheetWorx.Formatting.Alignment.TextRotation,SheetWorx.Formatting.Alignment.TextRotation)">
            <summary>
            Tests whether <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> <paramref name="x"/> is not equal to <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> <paramref name="y"/>.
            </summary>
            <param name="x">The first <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to test.</param>
            <param name="y">The second <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to test.</param>
            <returns><see langword="true"/> if <paramref name="x"/> is not equal to <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.op_Explicit(System.Int32)~SheetWorx.Formatting.Alignment.TextRotation">
            <summary>
            Explicitly converts a <see cref="T:System.Int32"/> to the equivalent <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> equivalent of <paramref name="value"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.op_Explicit(SheetWorx.Formatting.Alignment.TextRotation)~System.Int32">
            <summary>
            Explicitly converts a <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to the equivalent <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> to convert.</param>
            <returns>The <see cref="T:System.Int32"/> equivalent of <paramref name="value"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.Alignment.TextRotation.IsValidAngle(System.Int32)">
            <summary>
            Returns a boolean value indicating whether <paramref name="value"/> is a valid angle for the orientation of text.
            </summary>
            <param name="value">The value to test for validity as an angle for the orientation of text.</param>
            <returns>A boolean value indicating whether <paramref name="value"/> is a valid angle for the orientation of text.</returns>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.ReadingOrder">
            <summary>
            Enumeration of reading orders.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.ReadingOrder.ContextDependent">
            <summary>
            Specifies that the reading order is dependent on context.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.ReadingOrder.LeftToRight">
            <summary>
            Specifies left-to-right reading order.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.ReadingOrder.RightToLeft">
            <summary>
            Specifies right-to-left reading order.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.HorizontalAlignment">
            <summary>
            Specifies how text in a cell should be aligned horizontally.
            </summary>
            <remarks>
            <list type="bullet">
            <item>When <see cref="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.CenterAcrossSelection"/> or <see cref="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Fill"/> is set, orientation is reset to <see cref="P:SheetWorx.Formatting.Alignment.TextRotation.Normal"/>.</item>
            <item>When <see cref="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Fill"/> is selected, only complete repeats of the text will be made, and the text will only be repeated when the full extent of any repeats can be accommodated within the width of the cell.
            The text will be aligned to the left.</item>
            </list>
            </remarks>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Center">
            <summary>Specifies that the cell text should be horizontally centered.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.CenterAcrossSelection">
            <summary>Specifies that the cell text should be horizontally centered relative to its own cell and any empty cells to its right.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Distributed">
            <summary>Specifies that the cell text should be horizontally justified, including the last line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Fill">
            <summary>Specifies that the cell text should be repeated as many times as necessary in order to extend fully from the left edge of the cell to the right edge.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.General">
            <summary>Specifies that text values should be left justified, numerical values (including dates and times) should be right justified and logical and error values should be centered.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Justify">
            <summary>Specifies that the cell text should be horizontally justified, with the last line being aligned to the left.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Left">
            <summary>Specifies that the cell text should be aligned to the left.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.HorizontalAlignment.Right">
            <summary>Specifies that the cell text should be aligned to the right.</summary>
        </member>
        <member name="T:SheetWorx.Formatting.Alignment.VerticalAlignment">
            <summary>
            Specifies how text in a cell should be aligned vertically.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.VerticalAlignment.Bottom">
            <summary>Specifies that the cell text should be aligned to the bottom of the cell.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.VerticalAlignment.Center">
            <summary>Specifies that the cell text should be aligned to the vertical center of the cell.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.VerticalAlignment.Distributed">
            <summary>
            When the text is horizontal, specifies that the lines of cell text should be evenly distributed across the entire height of the cell.
            When the text is rotated to a vertical orientation, each line is justified across the height of the cell, including the last line.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.VerticalAlignment.Justify">
            <summary>
            When the text is horizontal, specifies that the lines of cell text should be evenly distributed across the entire height of the cell.
            When the text is rotated to a vertical orientation, each line is justified across the height of the cell, except for the last line which is aligned to the left of its vertical direction.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Alignment.VerticalAlignment.Top">
            <summary>Specifies that the cell text should be aligned to the top of the cell.</summary>
        </member>
        <member name="T:SheetWorx.Formatting.Borders.NamespaceDoc">
            <summary>
            Contains enumerations and interfaces relating to spreadsheet cell formatting border properties.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Borders.BorderIndex">
            <summary>
            Identifies the border of a cell, range or style.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.Bottom">
            <summary>Specifies the bottom border.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.Left">
            <summary>Specifies the left border.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.Right">
            <summary>Specifies the right border.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.Top">
            <summary>Specifies the top border.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.DiagonalDown">
            <summary>Specifies the downward-sloping diagonal border (that which runs from top-left to bottom-right).</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.DiagonalUp">
            <summary>Specifies the upward-sloping diagonal border (that which runs from bottom-left to top-right).</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.InsideHorizontal">
            <summary>Specifies all those horizontal borders which are not at the edge of a range.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderIndex.InsideVertical">
            <summary>Specifies all those vertical borders which are not at the edge of a range.</summary>
        </member>
        <member name="T:SheetWorx.Formatting.Borders.IBorder">
            <summary>
            Represents one of the borders of a cell, range or cell style.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.Color">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.ColorIndex">
            <summary>
            Gets or sets the zero-based index into the colour palette of the <see cref="T:SheetWorx.Workbook"/> of the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.ColorIsConsistent">
            <summary>
            Returns <see langword="true"/> if all borders represented by this <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> have the same <see cref="P:SheetWorx.Formatting.Borders.IBorder.Color"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.LineStyle">
            <summary>
            Gets or sets the line style of the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.LineStyleIsConsistent">
            <summary>
            Returns <see langword="true"/> if all borders represented by this <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> have the same <see cref="P:SheetWorx.Formatting.Borders.IBorder.LineStyle"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.ThemeColor">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the theme colour used by the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.TintAndShade">
            <summary>
            Gets or sets a value which darkens or lightens the colour of the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.TintAndShadeIsConsistent">
            <summary>
            Returns <see langword="true"/> if all borders represented by this <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> have the same <see cref="P:SheetWorx.Formatting.Borders.IBorder.TintAndShade"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorder.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which this <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Borders.IBorders">
            <summary>
            Represents the border properties for one or more cells, or of a cell style.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.Color">
            <summary>
            Sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the borders of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.ColorIndex">
            <summary>
            Sets the zero-based index into the colour palette of the <see cref="T:SheetWorx.Workbook"/> of the borders of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.Item(SheetWorx.Formatting.Borders.BorderIndex)">
            <summary>
            Returns an <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> representing the border indicated by <paramref name="index"/> of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
            <param name="index">The <see cref="T:SheetWorx.Formatting.Borders.BorderIndex"/> of the <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> to return.</param>
            <returns>An <see cref="T:SheetWorx.Formatting.Borders.IBorder"/> representing the border indicated by <paramref name="index"/> of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.</returns>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.LineStyle">
            <summary>
            Sets the <see cref="T:SheetWorx.Formatting.Borders.BorderLineStyle"/> of the borders of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.ThemeColor">
            <summary>
            Sets the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the theme colour used by the borders of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.TintAndShade">
            <summary>
            Sets a value which darkens or lightens the colour of the borders of the cells or cell style to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Borders.IBorders.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which the <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Borders.BorderLineStyle">
            <summary>
            Specifies the line style and weight of a border.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.None">
            <summary>Specifies no line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Thin">
            <summary>Specifies a thin solid line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Medium">
            <summary>Specifies a medium solid line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Dashed">
            <summary>Specifies a dashed line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Dotted">
            <summary>Specifies a dotted line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Thick">
            <summary>Specifies a thick solid line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Double">
            <summary>Specifies double solid lines.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.Hairline">
            <summary>Specifies a hairline solid line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.MediumDashed">
            <summary>Specifies a medium dashed line.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.DashDot">
            <summary>Specifies a line with alternating dashes and dots.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.MediumDashDot">
            <summary>Specifies a medium line with alternating dashes and dots.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.DashDotDot">
            <summary>Specifies a line with a repeating dash-dot-dot pattern.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.MediumDashDotDot">
            <summary>Specifies a medium line with a repeating dash-dot-dot pattern.</summary>
        </member>
        <member name="F:SheetWorx.Formatting.Borders.BorderLineStyle.SlantDashDot">
            <summary>Specifies a line with alternating slanted dashes and dots.</summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.NamespaceDoc">
            <summary>
            Contains enumerations and interfaces relating to spreadsheet cell formatting font properties.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.IFont">
            <summary>
            Represents the font for one or more cells, or of a cell style.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Bold">
            <summary>
            Gets or sets whether text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be bold.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.BoldIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Bold"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Color">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ColorIndex">
            <summary>
            Gets or sets the zero-based index into the colour palette of the <see cref="T:SheetWorx.Workbook"/> of the text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ColorIsConsistent">
            <summary>
            Gets a boolean value indicating whether the <see cref="P:SheetWorx.Formatting.Fonts.IFont.Color"/> of all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> is the same.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ColorType">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.Colors.ColorType"/> of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ColorTypeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.ColorType"/> is the same for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Italic">
            <summary>
            Gets or sets whether text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be italic.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ItalicIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Italic"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Name">
            <summary>
            Gets or sets the name of the font to use for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.NameIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Name"/> is the same for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.OutlineOnly">
            <summary>
            Gets or sets whether only the outline of text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be displayed.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.OutlineOnlyIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.OutlineOnly"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Size">
            <summary>
            Gets or sets the size of text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>, measured in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.SizeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Size"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Strikethrough">
            <summary>
            Gets or sets whether text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be struck through.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.StrikethroughIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Strikethrough"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Subscript">
            <summary>
            Gets or sets whether text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be subscript.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.SubscriptIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Subscript"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Superscript">
            <summary>
            Gets or sets whether text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should be superscript.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.SuperscriptIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Superscript"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ThemeColor">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the theme colour used by text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ThemeFont">
            <summary>
            Gets or sets which theme <see cref="T:SheetWorx.Formatting.Fonts.FontScheme"/> text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> should use.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.ThemeFontIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.ThemeFont"/> is the same for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.TintAndShade">
            <summary>
            Gets or sets a value which darkens or lightens the colour of text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.TintAndShadeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.TintAndShade"/> has the same value for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.Underline">
            <summary>
            Gets or sets the underline style for text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.UnderlineIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Fonts.IFont.Underline"/> is the same for all text using this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Fonts.IFont.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which this <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.CharacterSet">
            <summary>
            Enumeration of character sets
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Ansi">
            <summary>
            The ASCII character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Default">
            <summary>
            The default character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Symbol">
            <summary>
            The Symbol character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Mac">
            <summary>
            The Mac character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Shiftjis">
            <summary>
            The Shift JIS (Japanese) character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Hangul">
            <summary>
            The Hangul (Korean) character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Johab">
            <summary>
            The Johab (Korean) character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Gb2312">
            <summary>
            The GB 2312 (Simplified Chinese) character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.ChineseBig5">
            <summary>
            The Big5 (Traditional Chinese) character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Greek">
            <summary>
            The Greek character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Turkish">
            <summary>
            The Turkish character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Vietnamese">
            <summary>
            The Vietnamese character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Hebrew">
            <summary>
            The Hebrew character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Arabic">
            <summary>
            The Arabic character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Baltic">
            <summary>
            The Baltic character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Russian">
            <summary>
            The Russian character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Thai">
            <summary>
            The Thai character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.EastEurope">
            <summary>
            The Eastern European character set.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.CharacterSet.Oem">
            <summary>
            An extended ASCII character set used by DOS and some Windows fonts.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.FontScheme">
            <summary>
            Enumeration of theme fonts which a font may use.
            </summary>
            <remarks>
            The typeface which a font should use may be specified directly in the font, or it may be picked up from the workbook theme.
            </remarks>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontScheme.None">
            <summary>
            The font should not use any theme font typeface.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontScheme.Major">
            <summary>
            The font should use the Major typeface from the workbook theme.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontScheme.Minor">
            <summary>
            The font should use the Minor typeface from the workbook theme.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.FontFamily">
            <summary>
            Enumeration of font families.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.NotApplicable">
            <summary>
            Specifies that font family is not applicable for this font.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.Roman">
            <summary>
            Specifies that the font is from the Roman family.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.Swiss">
            <summary>
            Specifies that the font is from the Swiss family.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.Modern">
            <summary>
            Specifies that the font is from the Modern family.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.Script">
            <summary>
            Specifies that the font is from the Script family.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.FontFamily.Decorative">
            <summary>
            Specifies that the font is from the Decorative family.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Fonts.Underline">
            <summary>
            Enumeration of text underline styles.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.Underline.None">
            <summary>
            Specifies that text is not underlined.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.Underline.Single">
            <summary>
            Specifies that text has a single underline.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.Underline.Double">
            <summary>
            Specifies that text has a double underline.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.Underline.SingleAccounting">
            <summary>
            Specifies that text has a single accounting underline; the entire cell is underlined rather than just the text.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Fonts.Underline.DoubleAccounting">
            <summary>
            Specifies that text has a double accounting underline; the entire cell is underlined rather than just the text.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Interiors.NamespaceDoc">
            <summary>
            Contains enumerations and interfaces relating to spreadsheet cell formatting interior properties.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Interiors.IInterior">
            <summary>
            Represents the interior (fill) of one or more cells, or of a cell style.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.Color">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.ColorIndex">
            <summary>
            Gets or sets the zero-based index into the colour palette of the <see cref="T:SheetWorx.Workbook"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.ColorIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.Color"/> is the same for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.ColorType">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.Colors.ColorType"/> of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.ColorTypeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.ColorType"/> is the same for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.Pattern">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.Interiors.InteriorPattern"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternColor">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> pattern.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternColorIndex">
            <summary>
            Gets or sets the zero-based index into the colour palette of the <see cref="T:SheetWorx.Workbook"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> pattern.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternColorIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.PatternColor"/> is the same for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternColorType">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.Colors.ColorType"/> of the <see cref="T:SheetWorx.Formatting.Colors.Color"/> of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> pattern.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternColorTypeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.PatternColorType"/> is the same for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.Pattern"/> is the same for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternThemeColor">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the theme colour used by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> pattern.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternTintAndShade">
            <summary>
            Gets or sets a value which darkens or lightens the colour of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> pattern.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.PatternTintAndShadeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.PatternTintAndShade"/> has the same value for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.ThemeColor">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the theme colour used by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.TintAndShade">
            <summary>
            Gets or sets a value which darkens or lightens the colour of the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.TintAndShadeIsConsistent">
            <summary>
            Gets a boolean value indicating whether <see cref="P:SheetWorx.Formatting.Interiors.IInterior.TintAndShade"/> has the same value for all cells referred to by the <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Interiors.IInterior.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which this <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Interiors.InteriorPattern">
            <summary>
            Enumeration of <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> patterns.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.None">
            <summary>
            Specifies that there should be no pattern.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.Solid">
            <summary>
            Specifies a solid colour.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.MediumGray">
            <summary>
            Specifies a pattern which is 50% greyscale.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.DarkGray">
            <summary>
            Specifies a pattern which is 75% greyscale.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightGray">
            <summary>
            Specifies a pattern which is 25% greyscale.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.HorizontalStripes">
            <summary>
            Specifies a pattern with horizontal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.VerticalStripes">
            <summary>
            Specifies a pattern with vertical stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.DownwardDiagonalStripes">
            <summary>
            Specifies a pattern with downward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.UpwardDiagonalStripes">
            <summary>
            Specifies a pattern with upward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.Grid">
            <summary>
            Specifies a grid pattern with blocks of alternating foreground and background colour.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.Trellis">
            <summary>
            Specifies a trellis pattern, with both upward and downward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightHorizontalStripes">
            <summary>
            Specifies a pattern with light horizontal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightVerticalStripes">
            <summary>
            Specifies a pattern with light vertical stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightDown">
            <summary>
            Specifies a pattern with light downward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightUp">
            <summary>
            Specifies a pattern with light upward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightGrid">
            <summary>
            Specifies a light grid pattern with both light horizontal and light vertical stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.LightTrellis">
            <summary>
            Specifies a light trellis pattern, with both light upward and light downward diagonal stripes.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.GrayscaleOneEighth">
            <summary>
            Specifies a pattern which is 1/8th greyscale.
            </summary>
        </member>
        <member name="F:SheetWorx.Formatting.Interiors.InteriorPattern.GrayscaleOneSixteenth">
            <summary>
            Specifies a pattern which is 1/16th greyscale.
            </summary>
        </member>
        <member name="T:SheetWorx.Formatting.Style">
            <summary>
            Represents a named cell style associated with a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.AddIndent">
            <summary>
            Gets or sets whether text in cells using this <see cref="T:SheetWorx.Formatting.Style"/> is automatically indented when the text alignment in a cell is set to equal distribution (either horizontally or vertically).
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Borders">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> which represents the borders for this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.BuiltIn">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether this <see cref="T:SheetWorx.Formatting.Style"/> is built-in.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.BuiltInId">
            <summary>
            Gets the integer Id of this style if it is built-in, otherwise throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:SheetWorx.Formatting.Style"/> is not built-in.</exception>
        </member>
        <member name="P:SheetWorx.Formatting.Style.BuiltInLevel">
            <summary>
            Gets the integer level of this style if it is built-in, otherwise throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:SheetWorx.Formatting.Style"/> is not built-in.</exception>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Font">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> which represents the font for this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.FormulaHidden">
            <summary>
            Gets or sets whether formulas in cells using this <see cref="T:SheetWorx.Formatting.Style"/> will be hidden when a <see cref="T:SheetWorx.Sheets.Worksheet"/> is protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.HorizontalAlignment">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.HorizontalAlignment"/> of text in cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludeAlignment">
            <summary>
            Gets or sets whether the alignment properties should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludeBorder">
            <summary>
            Gets or sets whether the border properties should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludeFont">
            <summary>
            Gets or sets whether the font properties should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludeNumber">
            <summary>
            Gets or sets whether the number format should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludePatterns">
            <summary>
            Gets or sets whether the interior (fill) properties should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IncludeProtection">
            <summary>
            Gets or sets whether the protection properties should be included when this <see cref="T:SheetWorx.Formatting.Style"/> is applied to a cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.IndentLevel">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> of text in cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Interior">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> which represents the interior (fill) for this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Locked">
            <summary>
            Gets or sets whether cells using this <see cref="T:SheetWorx.Formatting.Style"/> will be locked when a <see cref="T:SheetWorx.Sheets.Worksheet"/> is protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Name">
            <summary>
            Gets or sets the name of this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.NumberFormat">
            <summary>
            Gets or sets the number format to be used by cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Orientation">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> of text in cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.ReadingOrder">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.ReadingOrder"/> for cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.ShrinkToFit">
            <summary>
            Gets or sets whether text in cells using this <see cref="T:SheetWorx.Formatting.Style"/> will shrink to fit the bounds of the cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.StyleCollection">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.StyleCollection"/> of the <see cref="T:SheetWorx.Workbook"/> to which this <see cref="T:SheetWorx.Formatting.Style"/> belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.VerticalAlignment">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.VerticalAlignment"/> of text in cells using this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which this <see cref="T:SheetWorx.Formatting.Style"/> belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.Style.WrapText">
            <summary>
            Gets or sets whether text in cells using this <see cref="T:SheetWorx.Formatting.Style"/> will wrap.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.Style.Delete">
            <summary>
            Deletes this <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:SheetWorx.Formatting.Style"/> is built-in. Built-in styles cannot be deleted.</exception>
        </member>
        <member name="T:SheetWorx.Formatting.StyleCollection">
            <summary>
            Represents the collection of cell styles belonging to a workbook.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.StyleCollection.Count">
            <summary>
            Gets the number of cell styles existing in the workbook to which this collection belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.StyleCollection.Item(System.Int32)">
            <summary>
            Gets the cell style with the provided zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the cell style to get.</param>
            <returns>The cell style with the provided <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than 0.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:SheetWorx.Formatting.StyleCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:SheetWorx.Formatting.StyleCollection.Item(System.String)">
            <summary>
            Gets the cell style with the provided <paramref name="name"/>.
            </summary>
            <param name="name">The name of the cell style to get.</param>
            <returns>The cell style with the provided <paramref name="name"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No style called <paramref name="name"/> exists in the workbook.</exception>
        </member>
        <member name="P:SheetWorx.Formatting.StyleCollection.Normal">
            <summary>
            Gets the "Normal" cell style for the workbook to which this collection belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Formatting.StyleCollection.Workbook">
            <summary>
            Gets the workbook to which this collection belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.Contains(System.String)">
            <summary>
            Determines whether the workbook has a cell style with the provided <paramref name="name"/>.
            </summary>
            <param name="name">The name of the cell style to look for.</param>
            <returns><see langword="true"/> if the workbook has a cell style with the provided <paramref name="name"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.Add(System.String)">
            <summary>
            Adds a new cell style with the provided <paramref name="name"/> to the workbook.
            </summary>
            <param name="name">The name of the cell style to add.</param>
            <returns>An instance of <see cref="T:SheetWorx.Formatting.Style"/> representing the newly added cell style.</returns>
            <exception cref="T:System.InvalidOperationException">The workbook already contains a cell style with the provided <paramref name="name"/>.</exception>
            <remarks>The newly created cell style is identical to the standard "Normal" style (i.e. the "Normal" style when a workbook is first created).</remarks>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.TryAdd(System.String,SheetWorx.Formatting.Style@)">
            <summary>
            Tries to add a new cell style with the provided <paramref name="name"/> to the workbook.
            </summary>
            <param name="name">The name of the cell style to add.</param>
            <param name="style">
            When this method returns, refers to an instance of <see cref="T:SheetWorx.Formatting.Style"/> representing the newly added cell style, if the operation succeeded;
            otherwise <see langword="null"/> because the workbook already contains a cell style with the provided <paramref name="name"/> so the operation failed. 
            </param>
            <returns><see langword="true"/> if the new cell style was successfully added, otherwise <see langword="false"/>.</returns>
            <remarks>The newly created cell style is identical to the standard "Normal" style (i.e. the "Normal" style when a workbook is first created).</remarks>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.AddBasedOn(System.String,SheetWorx.Formatting.Style)">
            <summary>
            Adds a new cell style with the provided <paramref name="name"/> and based on the provided cell style to the workbook.
            </summary>
            <param name="name">The name of the cell style to add.</param>
            <param name="baseStyle">The cell style on which to base the new style.</param>
            <returns>An instance of <see cref="T:SheetWorx.Formatting.Style"/> representing the newly added cell style.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>The workbook already contains a cell style with the provided <paramref name="name"/>.</para>
            <para>-or-</para>
            <para>The provided base cell style does not belong to this workbook.</para>
            </exception>
            <remarks>
            The newly created cell style is a copy of the base cell style which is passed to the method.
            The base cell style must belong to the same workbook, otherwise an <see cref="T:System.InvalidOperationException"/> is thrown.
            </remarks>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.TryAddBasedOn(System.String,SheetWorx.Formatting.Style,SheetWorx.Formatting.Style@)">
            <summary>
            Tries to add a new cell style with the provided <paramref name="name"/> and based on the provided cell style to the workbook.
            </summary>
            <param name="name">The name of the cell style to add.</param>
            <param name="baseStyle">The cell style on which to base the new style.</param>
            <param name="style">
            When this method returns, refers to an instance of <see cref="T:SheetWorx.Formatting.Style"/> representing the newly added cell style, if the operation succeeded;
            otherwise <see langword="null"/> because the workbook already contains a cell style with the provided <paramref name="name"/> or the base cell style does not belong to this workbook, so the operation failed.
            </param>
            <returns><see langword="true"/> if the new cell style was successfully added, otherwise <see langword="false"/>.</returns>
            <remarks>The newly created cell style is a copy of the base cell style which is passed to the method.</remarks>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.Remove(SheetWorx.Formatting.Style)">
            <summary>
            Removes the provided cell style from the workbook.
            </summary>
            <param name="style">The cell style to be removed.</param>
            <exception cref="T:System.InvalidOperationException">
            <para>The provided cell style does not belong to this workbook.</para>
            <para>-or-</para>
            <para>The provided cell style is built-in. Built-in cell styles cannot be removed.</para>
            </exception>
            <remarks>This method simply calls <see cref="M:SheetWorx.Formatting.Style.Delete"/> internally: the two methods are equivalent.</remarks>
        </member>
        <member name="M:SheetWorx.Formatting.StyleCollection.Remove(System.String)">
            <summary>
            Removes the cell style with the provided <paramref name="name"/> from the workbook.
            </summary>
            <param name="name">The name of the cell style to remove.</param>
            <exception cref="T:System.InvalidOperationException">
            <para>No cell style with the provided <paramref name="name"/> exists in the workbook.</para>
            <para>-or-</para>
            <para>The cell style with the provided <paramref name="name"/> is built-in. Built-in cell styles cannot be removed.</para>
            </exception>
        </member>
        <member name="M:SheetWorx.Formulas.ExpressionVisitors.TreeFlatteningVisitor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SheetWorx.Formulas.Expressions.BinaryValue.BinaryValueExpression.Left">
            <summary>
            Gets the left operand of the binary operation.
            </summary>
        </member>
        <member name="P:SheetWorx.Formulas.Expressions.BinaryValue.BinaryValueExpression.Right">
            <summary>
            Gets the right operand of the binary operation.
            </summary>
        </member>
        <member name="P:SheetWorx.Formulas.Expressions.BinaryReference.BinaryReferenceExpression.Left">
            <summary>
            Gets the left operand of the binary operation.
            </summary>
        </member>
        <member name="P:SheetWorx.Formulas.Expressions.BinaryReference.BinaryReferenceExpression.Right">
            <summary>
            Gets the right operand of the binary operation.
            </summary>
        </member>
        <member name="M:SheetWorx.Formulas.References.ReferenceArea.#ctor(System.Boolean)">
            <summary>
            Constructor used only for creating a <see cref="T:SheetWorx.Formulas.References.ReferenceArea"/> which is an error.
            </summary>
            <param name="isSingleCell">
            <see langword="true"/> indicates the error reference is to a single cell.
            <see langword="false"/> indicates it is to an area.
            </param>
        </member>
        <member name="P:SheetWorx.Formulas.Parsing.Lexer.TokensRemaining">
            <summary>
            Gets the number of tokens left, including that at the current Index.
            </summary>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.Lexer.Advance(System.Int32)">
            <summary>
            Advances the cursor. Note that this does not do any out of bounds checks so this must be handled separately.
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.Lexer.Peek(System.Int32)">
            <summary>
            Returns the token which is offset number of tokens after the current token. If offset is omitted, the current token is returned.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.Tokenizer.Advance(System.Int32)">
            <summary>
            Advances the cursor. Note that this does not do any out of bounds checks so this must be handled separately.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.Tokenizer.Peek(System.Int32)">
            <summary>
            Returns the character which is offset number of characters after the current character. If offset is omitted, the current character is returned.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:SheetWorx.Formulas.Parsing.FormulaTextParser.TokensRemaining">
            <summary>
            Gets the number of tokens left, including that at the current Index.
            </summary>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.FormulaTextParser.Advance(System.Int32)">
            <summary>
            Advances the cursor. Note that this does not do any out of bounds checks so this must be handled separately.
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:SheetWorx.Formulas.Parsing.FormulaTextParser.Peek(System.Int32)">
            <summary>
            Returns the token which is offset number of tokens after the current token. If offset is omitted, the current token is returned.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:SheetWorx.LicenceInfo">
            <summary>
            Provides the method which is used to set the licence info of the licence to be used.
            </summary>
        </member>
        <member name="M:SheetWorx.LicenceInfo.Set(System.Int32,System.String,System.String)">
            <summary>
            Sets the licence info of the licence to be used.
            </summary>
            <remarks>
            This should be called once only, before any other use of the library is made.
            </remarks>
            <param name="licenceId">The id of the licence to be used.</param>
            <param name="userDomain">The domain of the email address to which licence to be used is assigned. This is everything after the '@' in the email address.</param>
            <param name="licenceKey">The licence key for the licence, obtained from the customer area of the <a href="www.foxrok.com">Foxrok website</a>.</param>
        </member>
        <member name="M:SheetWorx.Maths.Euclid.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to verify whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Statistics.MedianInplace(System.Double[])">
            <summary>
            Estimates the median value from the unsorted data array.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
        </member>
        <member name="M:SheetWorx.Maths.Statistics.OrderStatisticInplace(System.Double[],System.Int32)">
            <summary>
            Returns the order statistic (order 1..N) from the unsorted data array.
            </summary>
            <param name="data">Sample array, no sorting is assumed. Will be reordered.</param>
            <param name="order">One-based order of the statistic, must be between 1 and N (inclusive).</param>
        </member>
        <member name="M:SheetWorx.Maths.Statistics.Minimum(System.Double[])">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="M:SheetWorx.Maths.Statistics.Maximum(System.Double[])">
            <summary>
            Returns the smallest value from the unsorted data array.
            Returns NaN if data is empty or any entry is NaN.
            </summary>
            <param name="data">Sample array, no sorting is assumed.</param>
        </member>
        <member name="F:SheetWorx.Maths.Constants.LnPi">
            <summary>The number log[e](pi)</summary>
        </member>
        <member name="F:SheetWorx.Maths.Constants.Sqrt2">
            <summary>The number sqrt(2)</summary>
        </member>
        <member name="F:SheetWorx.Maths.Constants.Sqrt2Pi">
            <summary>The number sqrt(2pi)</summary>
        </member>
        <member name="F:SheetWorx.Maths.Constants.LogTwoSqrtEOverPi">
            <summary>The number log(2 * sqrt(e / pi))</summary>
        </member>
        <member name="F:SheetWorx.Maths.Constants.TwoSqrtEOverPi">
            <summary>The number 2 * sqrt(e / pi)</summary>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Beta.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Beta.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Beta.TryGetInvCDF(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x"></param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.NegativeBinomial.PMF(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="r">The number of failures (r) until the experiment stopped. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.NegativeBinomial.PMFLn(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="r">The number of failures (r) until the experiment stopped. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.NegativeBinomial.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="r">The number of failures (r) until the experiment stopped. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.StudentT.PDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.StudentT.CDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.StudentT.TryGetInvCDF(System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <param name="x"></param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Poisson.PMF(System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Poisson.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Hypergeometric.PMF(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Hypergeometric.CDF(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Binomial.PMF(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Binomial.CDF(System.Double,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.FisherSnedecor.PDF(System.Int64,System.Int64,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.FisherSnedecor.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.FisherSnedecor.TryGetInvCDF(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <param name="x"></param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.ChiSquared.PDF(System.Int64,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.ChiSquared.CDF(System.Int64,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.LogNormal.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <remarks>MATLAB: lognpdf</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.LogNormal.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <remarks>MATLAB: logncdf</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.LogNormal.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <remarks>MATLAB: logninv</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Normal.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <remarks>MATLAB: normpdf</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Normal.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <remarks>MATLAB: normcdf</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Normal.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <remarks>MATLAB: norminv</remarks>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Gamma.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Gamma.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Distributions.Gamma.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
        </member>
        <member name="F:SheetWorx.Maths.Precision.DoubleWidth">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:SheetWorx.Maths.Precision.DoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Demmel and used in LAPACK and Scilab.
            </summary>
        </member>
        <member name="F:SheetWorx.Maths.Precision.PositiveDoublePrecision">
            <summary>
            Standard epsilon, the maximum relative precision of IEEE 754 double-precision floating numbers (64 bit).
            According to the definition of Prof. Higham and used in the ISO C standard and MATLAB.
            </summary>
        </member>
        <member name="F:SheetWorx.Maths.Precision.DefaultDoubleAccuracy">
            <summary>
            Value representing 10 * 2^(-53) = 1.11022302462516E-15
            </summary>
        </member>
        <member name="M:SheetWorx.Maths.Precision.AlmostEqualNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum absolute error.
            </summary>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="maximumAbsoluteError">The absolute accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum absolute error, false otherwise.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.AlmostEqual(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.AlmostEqualRelative(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <returns>true if the two values differ by no more than 10 * 2^(-52); false otherwise.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.AlmostEqualNormRelative(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Compares two doubles and determines if they are equal
            within the specified maximum error.
            </summary>
            <param name="a">The norm of the first value (can be negative).</param>
            <param name="b">The norm of the second value (can be negative).</param>
            <param name="diff">The norm of the difference of the two values (can be negative).</param>
            <param name="maximumError">The accuracy required for being almost equal.</param>
            <returns>True if both doubles are almost equal up to the specified maximum error, false otherwise.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.AsInt64(System.Double)">
            <summary>
            Gets the equivalent <c>long</c> value for the given <c>double</c> value.
            </summary>
            <param name="value">The <c>double</c> value which should be turned into a <c>long</c> value.</param>
            <returns>
            The resulting <c>long</c> value.
            </returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.Increment(System.Double,System.Int32)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <param name="value">The value which needs to be incremented.</param>
            <param name="count">How many times the number should be incremented.</param>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
            <returns>The next larger floating point value.</returns>
        </member>
        <member name="M:SheetWorx.Maths.Precision.Decrement(System.Double,System.Int32)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <param name="value">The value which should be decremented.</param>
            <param name="count">How many times the number should be decremented.</param>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
            <returns>The next smaller floating point value.</returns>
        </member>
        <member name="M:SheetWorx.Maths.RootFinding.Brent.TryFindRoot(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double@,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached.</param>
            <param name="maxIterations">Maximum number of iterations. Usually 100.</param>
            <param name="root">The root that was found, if any. Undefined if the function returns false.</param>
            <returns>True if a root with the specified accuracy was found, else false.</returns>
        </member>
        <member name="M:SheetWorx.Maths.RootFinding.Brent.Sign(System.Double,System.Double)">
            <summary>Helper method useful for preventing rounding errors.</summary>
            <returns>a*sign(b)</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.#cctor">
            <summary>
            Initializes static members of the SpecialFunctions class.
            </summary>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.FactorialLn(System.Int32)">
            <summary>
            Computes the logarithmic factorial function x -> ln(x!) of an integer number > 0.
            </summary>
            <returns>A value value! for value > 0</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient: n choose k.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The binomial coefficient: n choose k.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Computes the natural logarithm of the binomial coefficient: ln(n choose k).
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="k">A nonnegative value h.</param>
            <returns>The logarithmic binomial coefficient: ln(n choose k).</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.Erf(System.Double)">
            <summary>Calculates the error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 1 if <c>x == double.PositiveInfinity</c>.</item>
                    <item>returns -1 if <c>x == double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.Erfc(System.Double)">
            <summary>Calculates the complementary error function.</summary>
            <param name="x">The value to evaluate.</param>
            <returns>the complementary error function evaluated at given value.</returns>
            <remarks>
                <list type="bullet">
                    <item>returns 0 if <c>x == double.PositiveInfinity</c>.</item>
                    <item>returns 2 if <c>x == double.NegativeInfinity</c>.</item>
                </list>
            </remarks>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.ErfInv(System.Double)">
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <returns>The inverse error function evaluated at given value.</returns>
            <remarks>
              <list type="bullet">
                <item>returns double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
                <item>returns double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
              </list>
            </remarks>
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.ErfImp(System.Double,System.Boolean)">
            <summary>
            Implementation of the error function.
            </summary>
            <param name="z">Where to evaluate the error function.</param>
            <param name="invert">Whether to compute 1 - the error function.</param>
            <returns>the error function.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.ErfcInv(System.Double)">
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
            <returns>The complementary inverse error function evaluated at given value.</returns>
            <remarks> We have tested this implementation against the arbitrary precision mpmath library
            and found cases where we can only guarantee 9 significant figures correct.
                <list type="bullet">
                    <item>returns double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item>
                    <item>returns double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item>
                </list>
            </remarks>
            <summary>calculates the complementary inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the complementary inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.ErfInvImpl(System.Double,System.Double,System.Double)">
            <summary>
            The implementation of the inverse error function.
            </summary>
            <param name="p">First intermediate parameter.</param>
            <param name="q">Second intermediate parameter.</param>
            <param name="s">Third intermediate parameter.</param>
            <returns>the inverse error function.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The logarithm of the Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the Euler Beta function.
            </summary>
            <param name="z">The first Beta parameter, a positive real number.</param>
            <param name="w">The second Beta parameter, a positive real number.</param>
            <returns>The Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
            <param name="a">The first Beta parameter, a positive real number.</param>
            <param name="b">The second Beta parameter, a positive real number.</param>
            <param name="x">The upper limit of the integral.</param>
            <returns>The regularized lower incomplete beta function.</returns>
        </member>
        <member name="F:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaN">
            <summary>
            The order of the <see cref="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="F:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaR">
            <summary>
            Auxiliary variable when evaluating the <see cref="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLn(System.Double)"/> function.
            </summary>
        </member>
        <member name="F:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaDk">
            <summary>
            Polynomial coefficients for the <see cref="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLn(System.Double)"/> approximation.
            </summary>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLn(System.Double)">
            <summary>
            Computes the logarithm of the Gamma function.
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).</para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 14 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Computes the Gamma function.
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            <para>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which should achieve an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </para>
            <para>Our unit tests suggest that the accuracy of the Gamma function is correct up to 13 floating point digits.</para>
            </remarks>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLowerIncomplete(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete gamma function
            gamma(a,x) = int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLowerRegularized(System.Double,System.Double)">
            <summary>
            Returns the lower incomplete regularized gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
            <param name="a">The argument for the gamma function.</param>
            <param name="x">The upper integral limit.</param>
            <returns>The lower incomplete gamma function.</returns>
        </member>
        <member name="M:SheetWorx.Maths.SpecialFunctions.SpecialFunctions.GammaLowerRegularizedInv(System.Double,System.Double)">
            <summary>
            Returns the inverse P^(-1) of the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0,
            such that P^(-1)(a,P(a,x)) == x.
            </summary>
        </member>
        <member name="M:SheetWorx.Maths.Evaluate.Polynomial(System.Double,System.Double[])">
            <summary>
            Evaluate a polynomial at point x.
            Coefficients are ordered by power with power k at index k.
            Example: coefficients [3,-1,2] represent y=2x^2-x+3.
            </summary>
            <param name="z">The location where to evaluate the polynomial at.</param>
            <param name="coefficients">The coefficients of the polynomial, coefficient for power k at index k.</param>
        </member>
        <member name="T:SheetWorx.NamespaceDoc">
            <summary>
            The top-level namespace for the SheetWorx API. Contains the <see cref="T:SheetWorx.WorkbookScope"/> and <see cref="T:SheetWorx.Workbook"/> classes.
            </summary>
        </member>
        <member name="T:SheetWorx.Comments.NamespaceDoc">
            <summary>
            Contains classes relating to worksheet cell comments.
            </summary>
        </member>
        <member name="T:SheetWorx.Comments.Comment">
            <summary>
            Represents a comment attached to a <see cref="T:SheetWorx.Sheets.Worksheet"/> cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.Comment.Address">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.CellAddress"/> of the cell to which this <see cref="T:SheetWorx.Comments.Comment"/> is attached.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.Comment.Author">
            <summary>
            Gets the name of the author of this <see cref="T:SheetWorx.Comments.Comment"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.Comment.Text">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.RichString"/> representing the text of this <see cref="T:SheetWorx.Comments.Comment"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.Comment.Visible">
            <summary>
            Gets or sets whether this <see cref="T:SheetWorx.Comments.Comment"/> is visible.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.Comment.Worksheet">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.Worksheet"/> of the cell to which this <see cref="T:SheetWorx.Comments.Comment"/> is attached.
            </summary>
        </member>
        <member name="M:SheetWorx.Comments.Comment.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Comments.Comment"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Comments.Comment"/>. This is its raw text.</returns>
        </member>
        <member name="T:SheetWorx.Comments.CommentCollection">
            <summary>
            Represents the collection of cell comments attached to cells in a <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.CommentCollection.Count">
            <summary>
            Gets the count of comments in the <see cref="T:SheetWorx.Comments.CommentCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Comments.CommentCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.Comments.Comment"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Comments.CommentCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Comments.Comment"/>.</param>
            <returns>The <see cref="T:SheetWorx.Comments.Comment"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Comments.CommentCollection"/>.</returns>
        </member>
        <member name="M:SheetWorx.Comments.CommentCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Ranges.NamespaceDoc">
            <summary>
            Contains the <see cref="T:SheetWorx.Ranges.IRange"/> interface and related enumerations.
            </summary>
        </member>
        <member name="T:SheetWorx.Ranges.DeleteShiftDirection">
            <summary>
            Enumeration of directions in which remaining cells should be shifted when cells are deleted.
            </summary>
        </member>
        <member name="F:SheetWorx.Ranges.DeleteShiftDirection.ShiftToLeft">
            <summary>
            Specifies that cells should be shifted to the left.
            </summary>
        </member>
        <member name="F:SheetWorx.Ranges.DeleteShiftDirection.ShiftUp">
            <summary>
            Specifies that cells should be shifted upwards.
            </summary>
        </member>
        <member name="T:SheetWorx.Ranges.InsertShiftDirection">
            <summary>
            Enumeration of directions in which existing cells should be shifted to make space for inserted cells.
            </summary>
        </member>
        <member name="F:SheetWorx.Ranges.InsertShiftDirection.ShiftToRight">
            <summary>
            Specifies that cells should be shifted to the right.
            </summary>
        </member>
        <member name="F:SheetWorx.Ranges.InsertShiftDirection.ShiftDown">
            <summary>
            Specifies that cells should be shifted downwards.
            </summary>
        </member>
        <member name="T:SheetWorx.Ranges.IRange">
            <summary>
            Represents a single cell or one or more non-overlapping rectangular areas of cells on a single worksheet.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.AddIndent">
            <summary>
            Gets or sets whether text is automatically indented when alignment is set to equal distribution.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.AddIndentIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.AddIndent"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Address">
            <summary>
            Gets the address of the range as a <see cref="T:System.String"/> in the A1 style, with relative row and column.
            </summary>
            <remarks>
            The address is returned in A1 style with relative row and column, that is without a '$' preceding the row or column segments of the address.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.AllowEdit">
            <summary>
            Gets or sets whether the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> can be edited when the <see cref="P:SheetWorx.Ranges.IRange.Worksheet"/> is protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.AreaCount">
            <summary>
            Gets the number of cell areas represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Areas">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:SheetWorx.Ranges.IRange"/>, each representing one of the rectangular areas of contiguous cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Borders">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Borders.IBorders"/> which represents the borders of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.CellCount">
            <summary>
            Gets the total number of cells contained in areas represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Column">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.ColumnIndex"/> of the first column of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents a single cell or area, the <see cref="T:SheetWorx.Core.ColumnIndex"/> of the left-most cell(s) is returned.
            <para>Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents multiple cell areas, the <see cref="T:SheetWorx.Core.ColumnIndex"/> of the left-most cell(s) of the first area is returned.</para>
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ColumnCount">
            <summary>
            Gets the number of columns containing cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents multiple cell areas with overlapping column ranges, the overlapping columns are not double-counted.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ColumnWidth">
            <summary>
            Gets or sets the width of the columns which this <see cref="T:SheetWorx.Ranges.IRange"/> spans.
            </summary>
            <remarks>
            <para>When getting this property, the width of the first column only is returned.
            Use <see cref="P:SheetWorx.Ranges.IRange.ColumnWidthIsConsistent"/> to determine whether all columns spanned by the <see cref="T:SheetWorx.Ranges.IRange"/> have the same width.</para>
            <para>When setting this property, the width of all columns spanned by the <see cref="T:SheetWorx.Ranges.IRange"/> is set.</para>
            <para>Column width is measured in units of the width of one character in the "Normal" cell style.</para>
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ColumnWidthIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.ColumnWidth"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Comment">
            <summary>
            Gets a <see cref="P:SheetWorx.Ranges.IRange.Comment"/> representing the comment associated with the top-left cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, or <see langword="null"/> if there is no such comment.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.CurrentArray">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the range of cells containing the array formula in the top-left cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            Returns <see langword="null"/> if the top-left cell does not contain an array formula.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.CurrentRegion">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the contiguous range of non-empty cells which contains the first area of cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            The first area of cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> is expanded iteratively until there are no non-empty cells adjacent to its perimeter cells.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EndDown">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the single cell at the bottom of the contiguous downward range of cells beginning with the top left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EndLeft">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the single cell at the left end of the contiguous leftward range of cells beginning with the top left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EndRight">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the single cell at the right end of the contiguous rightward range of cells beginning with the top left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EndUp">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the single cell at the top of the contiguous upward range of cells beginning with the top left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EntireColumn">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> which represents the entire columns of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EntireMergeArea">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> which represents this <see cref="T:SheetWorx.Ranges.IRange"/>, extended to include the full extent of any merged cells which it partially includes. The area is extended iteratively until no partial merged cells are included.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.EntireRow">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> which represents the entire rows of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Font">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Fonts.IFont"/> which represents the font of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Formula">
            <summary>
            Gets or sets the formula of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.FormulaArray">
            <summary>
            Gets or sets the array formula of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.FormulaHidden">
            <summary>
            Gets or sets whether formulas should be hidden in the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.FormulaHiddenIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.FormulaHidden"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HasArray">
            <summary>
            Returns <see langword="true"/> if any of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> contains an array formula, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HasArrayIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.HasArray"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HasFormula">
            <summary>
            Returns <see langword="true"/> if any of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> contains a formula, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HasFormulaIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.HasFormula"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Height">
            <summary>
            Gets the total height in points of the rows represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Hidden">
            <summary>
            Gets or sets whether the rows or columns represented by this <see cref="T:SheetWorx.Ranges.IRange"/> are hidden. This will only work for an <see cref="T:SheetWorx.Ranges.IRange"/> which represents entire rows or columns.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HorizontalAlignment">
            <summary>
            Gets or sets <see cref="T:SheetWorx.Formatting.Alignment.HorizontalAlignment"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.HorizontalAlignmentIsConsistent">
            <summary>
            Returns true if the value of <see cref="P:SheetWorx.Ranges.IRange.HorizontalAlignment"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.IndentLevel">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.IndentLevel"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.IndentLevelIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.IndentLevel"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Interior">
            <summary>
            Gets an <see cref="T:SheetWorx.Formatting.Interiors.IInterior"/> which represents the interior (fill) of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.IsEntireColumns">
            <summary>
            Returns <see langword="true"/> if all of the cell areas represented by this <see cref="T:SheetWorx.Ranges.IRange"/> extend from the first row to the last row, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.IsEntireRows">
            <summary>
            Returns <see langword="true"/> if all of the cell areas represented by this <see cref="T:SheetWorx.Ranges.IRange"/> extend from the first column to the last column, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.IsValid">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:SheetWorx.Ranges.IRange"/> is still valid, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Item(System.String)">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> which is offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="address">The address of the desired cell area(s), relative to the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/>, offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="address"/> is ill-formed or refers to cells beyond the worksheet extents when offset from the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.</exception>
            <remarks>
            <para>The address of the resulting <see cref="T:SheetWorx.Ranges.IRange"/> is <paramref name="address"/> plus a row and column offset, given by the row and column of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.</para>
            <para>The <paramref name="address"/> can be that of a single cell, a single cell area, or multiple cell areas. If <paramref name="address"/> refers to multiple cell areas, the addresses of these areas should separated by commas (',').</para>
            <para>Absolute reference indicators ('$') in the <paramref name="address"/> have no effect.</para>
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> representing a single cell which is offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="rowOffset">The offset for the row of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the row of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <param name="columnOffset">The offset for the column of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the column of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/>, offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The offsets given by <paramref name="rowOffset"/> and/or <paramref name="columnOffset"/> yield a cell address which is beyond the worksheet extents when applied to the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.</exception>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a new <see cref="T:SheetWorx.Ranges.IRange"/> representing a single cell area which is offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="rowOffset1">The offset for the top-most row of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the row of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <param name="columnOffset1">The offset for the left-most column of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the column of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <param name="rowOffset2">The offset for the bottom-most row of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the row of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <param name="columnOffset2">The offset for the right-most column of the returned <see cref="T:SheetWorx.Ranges.IRange"/> relative to the column of the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>. This may be positive or negative.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/>, offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The offsets given by <paramref name="rowOffset1"/>, <paramref name="columnOffset1"/>, <paramref name="rowOffset2"/> and/or <paramref name="columnOffset2"/> yield an area address which extends beyond the worksheet extents when applied to the top-left cell of this <see cref="T:SheetWorx.Ranges.IRange"/>.</exception>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Locked">
            <summary>
            Gets or sets whether the contents of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> should be locked when the <see cref="T:SheetWorx.Sheets.Worksheet"/> is protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.LockedIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.Locked"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.MergeArea">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the merged area of which the cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/> is a part.
            </summary>
            <remarks>
            If this <see cref="T:SheetWorx.Ranges.IRange"/> does not represent a single cell, an exception is thrown. If this <see cref="T:SheetWorx.Ranges.IRange"/> represents a single cell which is not part of a merged area, this <see cref="T:SheetWorx.Ranges.IRange"/> is returned.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.MergeCells">
            <summary>
            Gets or sets whether the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> are merged. Setting is equivalent to calling <see cref="M:SheetWorx.Ranges.IRange.Merge"/> or <see cref="M:SheetWorx.Ranges.IRange.UnMerge"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.MergeCellsIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.MergeCells"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.NumberFormat">
            <summary>
            Gets or sets the number format of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.NumberFormatIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.NumberFormat"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Orientation">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.TextRotation"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.OrientationIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.Orientation"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.OutlineLevel">
            <summary>
            Gets or sets the outline level of the rows or columns represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.OutlineLevelIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.OutlineLevel"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.PrefixCharacter">
            <summary>
            Gets the prefix character for the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.PrefixCharacterIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.PrefixCharacter"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ReadingOrder">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.ReadingOrder"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ReadingOrderIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.ReadingOrder"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Row">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.RowIndex"/> of the first row of this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents a single cell or area, the <see cref="T:SheetWorx.Core.RowIndex"/> of the top-most cell(s) is returned.
            <para>Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents multiple cell areas, the <see cref="T:SheetWorx.Core.RowIndex"/> of the top-most cell(s) of the first area is returned.</para>
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.RowCount">
            <summary>
            Gets the number of rows containing cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            Where the <see cref="T:SheetWorx.Ranges.IRange"/> represents multiple cell areas with overlapping row ranges, the overlapping rows are not double-counted.
            </remarks>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.RowHeight">
            <summary>
            Gets the height in points of the first row represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, or sets the height in points of all rows represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.RowHeightIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.RowHeight"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ShrinkToFit">
            <summary>
            Gets or sets whether the contents of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> will be shrunk as necessary to display them entirely within the cell boundaries.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.ShrinkToFitIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.ShrinkToFit"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Style">
            <summary>
            Gets or sets the named cell <see cref="T:SheetWorx.Formatting.Style"/> used by the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.StyleIsConsistent">
            <summary>
            Returns <see langword="true"/> if <see cref="P:SheetWorx.Ranges.IRange.Style"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Text">
            <summary>
            Gets the value of the top-left cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/> as a string, formatted according to the number format applicable to the cell.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Value">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.CellValue"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Values">
            <summary>
            Gets or sets the values of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.VerticalAlignment">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Formatting.Alignment.VerticalAlignment"/> of the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.VerticalAlignmentIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.VerticalAlignment"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Width">
            <summary>
            Gets the width of the columns spanned by the <see cref="T:SheetWorx.Ranges.IRange"/> in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.Worksheet">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.Worksheet"/> to which the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> belong.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.WrapText">
            <summary>
            Gets or sets whether text is wrapped in the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Ranges.IRange.WrapTextIsConsistent">
            <summary>
            Returns <see langword="true"/> if the value of <see cref="P:SheetWorx.Ranges.IRange.WrapText"/> is the same for all cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Activate">
            <summary>
            Sets the active cell of the <see cref="T:SheetWorx.Views.WorksheetView"/> for the <see cref="P:SheetWorx.Ranges.IRange.Worksheet"/> to which the <see cref="T:SheetWorx.Ranges.IRange"/> relates of the active <see cref="T:SheetWorx.Views.Window"/> to the top-left cell of the <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.AddComment(SheetWorx.Core.RichString,System.String)">
            <summary>
            Adds a comment to the first cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="text">The <see cref="T:SheetWorx.Core.RichString"/> text to add to the cell first cell represented by this <see cref="T:SheetWorx.Ranges.IRange"/> as a comment.</param>
            <param name="author">The name of the author of the comment.</param>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.AutoFit">
            <summary>
            Sets the height of the rows spanned by this <see cref="T:SheetWorx.Ranges.IRange"/> to fit their content.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Clear">
            <summary>
            Clears the contents (values and formulae) and cell formatting from the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.ClearComments">
            <summary>
            Clears all comments attached to cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.ClearContents">
            <summary>
            Clears the contents (values and formulae) from cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.ClearFormats">
            <summary>
            Clears all cell formatting from cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.ClearOutline">
            <summary>
            Removes all outline levels from the rows or columns represented by this <see cref="T:SheetWorx.Ranges.IRange"/>, or from the entire <see cref="T:SheetWorx.Sheets.Worksheet"/> if the <see cref="T:SheetWorx.Ranges.IRange"/> does not represent entire rows or columns.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.GetArea(System.Int32)">
            <summary>
            Returns an <see cref="T:SheetWorx.Ranges.IRange"/> representing the area of cells within this <see cref="T:SheetWorx.Ranges.IRange"/> with the specified zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the area for which to return an <see cref="T:SheetWorx.Ranges.IRange"/>.</param>
            <returns>An <see cref="T:SheetWorx.Ranges.IRange"/> representing the area of cells within this <see cref="T:SheetWorx.Ranges.IRange"/> with the specified zero-based <paramref name="index"/>.</returns>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Group">
            <summary>
            Increments the <see cref="P:SheetWorx.Ranges.IRange.OutlineLevel"/> of the rows or columns represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Intersect(SheetWorx.Ranges.IRange)">
            <summary>
            Returns a new <see cref="T:SheetWorx.Ranges.IRange"/> which is the intersection of another <see cref="T:SheetWorx.Ranges.IRange"/> with this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Ranges.IRange"/> with which this <see cref="T:SheetWorx.Ranges.IRange"/> is to intersect.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/> which is the intersection of another <see cref="T:SheetWorx.Ranges.IRange"/> with this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <remarks>
            The new <see cref="T:SheetWorx.Ranges.IRange"/> contains only those cells which are in both this <see cref="T:SheetWorx.Ranges.IRange"/> and <paramref name="other"/>.
            </remarks>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Merge">
            <summary>
            Merges the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <remarks>
            If any cells represented by the <see cref="T:SheetWorx.Ranges.IRange"/> are already merged, the final merge area is the smallest area bounding the already merged cells and the <see cref="T:SheetWorx.Ranges.IRange"/> area.
            Only the data and formatting of the top-left cell is retained.
            If the <see cref="T:SheetWorx.Ranges.IRange"/> contains multiple areas, the cells of each area are merged seperately.
            </remarks>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Offset(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SheetWorx.Ranges.IRange"/> which is offset from this <see cref="T:SheetWorx.Ranges.IRange"/> by a number of rows and columns.
            </summary>
            <param name="rowOffset">The number of rows by which the new <see cref="T:SheetWorx.Ranges.IRange"/> should be offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.</param>
            <param name="columnOffset">The number of columns by which the new <see cref="T:SheetWorx.Ranges.IRange"/> should be offset from this <see cref="T:SheetWorx.Ranges.IRange"/>.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/> which is offset from this <see cref="T:SheetWorx.Ranges.IRange"/> by a number of rows and columns.</returns>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Select">
            <summary>
            Makes the cells represented by this <see cref="T:SheetWorx.Ranges.IRange"/> the selection in the <see cref="P:SheetWorx.Views.WorksheetView.ActivePane"/> of the
             <see cref="T:SheetWorx.Views.WorksheetView"/> for the <see cref="P:SheetWorx.Ranges.IRange.Worksheet"/> of this <see cref="T:SheetWorx.Ranges.IRange"/> in the 
            <see cref="P:SheetWorx.Workbook.ActiveWindow"/> of the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Subtract(SheetWorx.Ranges.IRange)">
            <summary>
            Returns a new <see cref="T:SheetWorx.Ranges.IRange"/> which is the result of subtracting another <see cref="T:SheetWorx.Ranges.IRange"/> from this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Ranges.IRange"/> which is to be subtracted from this <see cref="T:SheetWorx.Ranges.IRange"/>.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/> which is the result of subtracting another <see cref="T:SheetWorx.Ranges.IRange"/> from this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <remarks>
            The new <see cref="T:SheetWorx.Ranges.IRange"/> contains only those cells which are in this <see cref="T:SheetWorx.Ranges.IRange"/> but are not in <paramref name="other"/>.
            </remarks>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Ungroup">
            <summary>
            Decrements the <see cref="P:SheetWorx.Ranges.IRange.OutlineLevel"/> of the rows or columns represented by this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.Union(SheetWorx.Ranges.IRange)">
            <summary>
            Returns a new <see cref="T:SheetWorx.Ranges.IRange"/> which is the union of another <see cref="T:SheetWorx.Ranges.IRange"/> with this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
            <param name="other">The <see cref="T:SheetWorx.Ranges.IRange"/> with which this <see cref="T:SheetWorx.Ranges.IRange"/> is to be united.</param>
            <returns>A new <see cref="T:SheetWorx.Ranges.IRange"/> which is the union of another <see cref="T:SheetWorx.Ranges.IRange"/> with this <see cref="T:SheetWorx.Ranges.IRange"/>.</returns>
            <remarks>
            The new <see cref="T:SheetWorx.Ranges.IRange"/> contains all those cells which are in either this <see cref="T:SheetWorx.Ranges.IRange"/> or <paramref name="other"/> (or both).
            </remarks>
        </member>
        <member name="M:SheetWorx.Ranges.IRange.UnMerge">
            <summary>
            Unmerges any merged cells which lie fully or partially within this <see cref="T:SheetWorx.Ranges.IRange"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Sheets.NamespaceDoc">
            <summary>
            Contains classes for each of the sheet types, and collections of sheets.
            </summary>
        </member>
        <member name="T:SheetWorx.Sheets.InternationalMacroSheet">
            <summary>
            Represents an international macro sheet.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.InternationalMacroSheet.Type">
            <inheritdoc />
        </member>
        <member name="T:SheetWorx.Sheets.MacroSheet">
            <summary>
            Represents a macro sheet.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.MacroSheet.Type">
            <inheritdoc />
        </member>
        <member name="T:SheetWorx.Sheets.DialogSheet">
            <summary>
            Represents a dialog sheet.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.DialogSheet.Type">
            <inheritdoc />
        </member>
        <member name="T:SheetWorx.Sheets.ChartSheet">
            <summary>
            Represents a chart sheet.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.ChartSheet.Type">
            <inheritdoc />
        </member>
        <member name="T:SheetWorx.Sheets.ReferenceableSheet">
            <summary>
            Represents a <see cref="T:SheetWorx.Sheets.Sheet"/> which may be referenced in a formula.
            </summary>
        </member>
        <member name="T:SheetWorx.Sheets.SheetType">
            <summary>
            Enumeration of <see cref="T:SheetWorx.Sheets.Sheet"/> types.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.SheetType.ChartSheet">
            <summary>
            Specifies a <see cref="T:SheetWorx.Sheets.ChartSheet"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.SheetType.DialogSheet">
            <summary>
            Specifies a <see cref="T:SheetWorx.Sheets.DialogSheet"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.SheetType.InternationalMacroSheet">
            <summary>
            Specifies an <see cref="T:SheetWorx.Sheets.InternationalMacroSheet"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.SheetType.MacroSheet">
            <summary>
            Specifies a <see cref="T:SheetWorx.Sheets.MacroSheet"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.SheetType.Worksheet">
            <summary>
            Specifies a <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Sheets.Sheet">
            <summary>
            The base class for all types of sheet which can exist in a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Exists">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.Sheet"/> exists.
            </summary>
            <remarks>A <see cref="T:SheetWorx.Sheets.Sheet"/> ceases to exist when the <see cref="T:SheetWorx.Workbook"/> to which it belongs is closed, or when it is removed.</remarks>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Type">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.SheetType"/> of the <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Index">
            <summary>
            Gets the zero-based index of the <see cref="T:SheetWorx.Sheets.Sheet"/> in the <see cref="T:SheetWorx.Sheets.SheetCollection"/> which it is contained by.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Visibility">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.Visibility"/> of the <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Sheets.Sheet"/> belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Sheet.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> of the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Sheets.Sheet"/> belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Sheets.Sheet.Activate">
            <summary>
            Makes the <see cref="T:SheetWorx.Sheets.Sheet"/> the <see cref="P:SheetWorx.Views.Window.ActiveSheet"/> of the <see cref="P:SheetWorx.Workbook.ActiveWindow"/> of the <see cref="T:SheetWorx.Workbook"/> to which it belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Sheets.SheetCollection`1">
            <summary>
            The base class for strongly typed collections of sheets in a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:SheetWorx.Sheets.Sheet"/> which the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> contains.</typeparam>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection`1.Count">
            <summary>
            Gets the number of sheets of type <typeparamref name="T"/> in the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> with the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="index">The zero-based index of the <typeparamref name="T"/> to get.</param>
            <returns>The <typeparamref name="T"/> with the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</returns>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection`1.Item(System.String)">
            <summary>
            Gets the <typeparamref name="T"/> with the given <paramref name="name"/> in the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> to get.</param>
            <returns>The <typeparamref name="T"/> with the given <paramref name="name"/> in the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</returns>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection`1.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Add(System.Int32)">
            <summary>
            Adds <paramref name="count"/> new sheets of type <typeparamref name="T"/> to the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="count">The number of sheets to add to the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>. Defaults to 1.</param>
            <returns>The first of the new sheets added to the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Add(System.String)">
            <summary>
            Adds a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> with the given <paramref name="name"/> to the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to add.</param>
            <returns>The newly added <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Insert(System.Int32)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> before the <see cref="T:SheetWorx.Sheets.Sheet"/> with the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Sheets.Sheet"/> before which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> called <paramref name="name"/> before the <see cref="T:SheetWorx.Sheets.Sheet"/> with the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Sheets.Sheet"/> before which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to add.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.InsertBefore(SheetWorx.Sheets.Sheet)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> before the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> before which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.InsertBefore(SheetWorx.Sheets.Sheet,System.String)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> called <paramref name="name"/> before the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> before which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to add.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.InsertAfter(SheetWorx.Sheets.Sheet)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> after the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> after which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.InsertAfter(SheetWorx.Sheets.Sheet,System.String)">
            <summary>
            Inserts a new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> called <paramref name="name"/> after the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> after which to insert the new <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</param>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to add.</param>
            <returns>The newly inserted <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <typeparamref name="T"/> at the given zero-based <paramref name="index"/> from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to remove from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Remove(System.String)">
            <summary>
            Removes the <typeparamref name="T"/> called <paramref name="name"/> from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to remove from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Remove(`0)">
            <summary>
            Removes the given <typeparamref name="T"/> <paramref name="sheet"/> from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> of type <typeparamref name="T"/> to remove from the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/>.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> contains a <typeparamref name="T"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name to test for.</param>
            <returns>A boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> contains a <typeparamref name="T"/> with the given <paramref name="name"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection`1.Contains(`0)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> contains the given <typeparamref name="T"/> <paramref name="sheet"/>.
            </summary>
            <param name="sheet">The <typeparamref name="T"/> to test for.</param>
            <returns>A boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection`1"/> contains the given <typeparamref name="T"/> <paramref name="sheet"/>.</returns>
        </member>
        <member name="T:SheetWorx.Sheets.SheetCollection">
            <summary>
            Represents a collection of sheets belonging to a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection.Count">
            <summary>
            Gets the count of sheets in the <see cref="T:SheetWorx.Sheets.SheetCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Sheets.SheetCollection"/> belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.Sheet"/> with the given zero-based <paramref name="index"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.SheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:SheetWorx.Sheets.Sheet"/> at the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Sheets.Sheet"/> to remove.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> to remove.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.Remove(SheetWorx.Sheets.Sheet)">
            <summary>
            Removes the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> to remove.</param>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains a <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> to test for.</param>
            <returns>A boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains a <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/></returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.Contains``1(System.String)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains a <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/> and of <see cref="T:System.Type"/> <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <see cref="T:SheetWorx.Sheets.Sheet"/> to test for. This must derive from <see cref="T:SheetWorx.Sheets.Sheet"/>.</typeparam>
            <param name="name">The name of the <see cref="T:SheetWorx.Sheets.Sheet"/> to test for.</param>
            <returns>A boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains a <see cref="T:SheetWorx.Sheets.Sheet"/> with the given <paramref name="name"/> and of <see cref="T:System.Type"/> <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.Contains(SheetWorx.Sheets.Sheet)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains the given <see cref="T:SheetWorx.Sheets.Sheet"/>.
            </summary>
            <param name="sheet">The <see cref="T:SheetWorx.Sheets.Sheet"/> to test for.</param>
            <returns>A boolean value indicating whether the <see cref="T:SheetWorx.Sheets.SheetCollection"/> contains the given <see cref="T:SheetWorx.Sheets.Sheet"/>.</returns>
        </member>
        <member name="M:SheetWorx.Sheets.SheetCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Sheets.Worksheet">
            <summary>
            Represents a worksheet in a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.Worksheet.MaximumHeight">
            <summary>
            The maximum allowed height for a <see cref="T:SheetWorx.Sheets.Worksheet"/> row, measured in points.
            </summary>
        </member>
        <member name="F:SheetWorx.Sheets.Worksheet.MaximumWidth">
            <summary>
            The maximum allowed width for a <see cref="T:SheetWorx.Sheets.Worksheet"/> column, measured as a number of standard digits of the Normal <see cref="T:SheetWorx.Formatting.Style"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.Cells">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing all of the cells on the <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.Comments">
            <summary>
            Gets the collection of all comments attached to cells on the <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.Names">
            <summary>
            Gets the collection of all defined names whose scope is this <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.ProtectContents">
            <summary>
            Gets a value indicating whether the contents of the <see cref="T:SheetWorx.Sheets.Worksheet"/> are protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.StandardHeight">
            <summary>
            Gets the default row height for this <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.StandardWidth">
            <summary>
            Gets or sets the default column width for this <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.UsedRange">
            <summary>
            Gets an <see cref="T:SheetWorx.Ranges.IRange"/> representing the section of the <see cref="T:SheetWorx.Sheets.Worksheet"/> which is in use.
            </summary>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.Type">
            <inheritdoc/>
        </member>
        <member name="P:SheetWorx.Sheets.Worksheet.Views">
            <summary>
            Gets a <see cref="T:SheetWorx.Views.WorksheetViewCollection"/> containing all the worksheet views for the <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Sheets.Worksheet.Protect(System.String)">
            <summary>
            Enables protection of the <see cref="T:SheetWorx.Sheets.Worksheet"/> using the specified <paramref name="password"/>.
            </summary>
            <param name="password">The password with which to protect the <see cref="T:SheetWorx.Sheets.Worksheet"/>.</param>
        </member>
        <member name="M:SheetWorx.Sheets.Worksheet.SaveAsCsv(System.String)">
            <summary>
            Saves the <see cref="T:SheetWorx.Sheets.Worksheet"/> as a CSV file with the given <paramref name="filename"/>.
            </summary>
            <param name="filename">The filename (optionally including path) with which to save the <see cref="T:SheetWorx.Sheets.Worksheet"/>.</param>
        </member>
        <member name="M:SheetWorx.Sheets.Worksheet.Unprotect(System.String)">
            <summary>
            Disables protection of the <see cref="T:SheetWorx.Sheets.Worksheet"/>.
            </summary>
            <param name="password">The password with which the <see cref="T:SheetWorx.Sheets.Worksheet"/> was originally protected.</param>
        </member>
        <member name="T:SheetWorx.Sheets.WorksheetCollection">
            <summary>
            Represents a collection of worksheets in a workbook.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.NamespaceDoc">
            <summary>
            Contains classes relating to workbook themes.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Colors.NamespaceDoc">
            <summary>
            Contains classes relating to workbook theme colors.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Colors.SchemeColorType">
            <summary>
            Specifies the type of a color scheme base color.
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.SchemeColorType.ScRgb">
            <summary>Indicates an scRGB color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.SchemeColorType.SRgb">
            <summary>Indicates an sRGB color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.SchemeColorType.Hsl">
            <summary>Indicates an HSL color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.SchemeColorType.System">
            <summary>Indicates a system color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.SchemeColorType.Preset">
            <summary>Indicates a preset color.</summary>
        </member>
        <member name="T:SheetWorx.Themes.Colors.PresetSchemeColor">
            <summary>
            Represents one of the preset scheme base colors.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.PresetSchemeColor.R">
            <summary>
            Gets the sRGB level of the red channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.PresetSchemeColor.G">
            <summary>
            Gets the sRGB level of the green channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.PresetSchemeColor.B">
            <summary>
            Gets the sRGB level of the blue channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.PresetSchemeColor.Name">
            <summary>
            Gets the name of this preset color.
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.AliceBlue">
            <summary>
            Gets the preset color "AliceBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.AntiqueWhite">
            <summary>
            Gets the preset color "AntiqueWhite".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Aqua">
            <summary>
            Gets the preset color "Aqua".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Aquamarine">
            <summary>
            Gets the preset color "Aquamarine".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Azure">
            <summary>
            Gets the preset color "Azure".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Beige">
            <summary>
            Gets the preset color "Beige".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Bisque">
            <summary>
            Gets the preset color "Bisque".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Black">
            <summary>
            Gets the preset color "Black".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.BlanchedAlmond">
            <summary>
            Gets the preset color "BlanchedAlmond".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Blue">
            <summary>
            Gets the preset color "Blue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.BlueViolet">
            <summary>
            Gets the preset color "BlueViolet".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Brown">
            <summary>
            Gets the preset color "Brown".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.BurlyWood">
            <summary>
            Gets the preset color "BurlyWood".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.CadetBlue">
            <summary>
            Gets the preset color "CadetBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Chartreuse">
            <summary>
            Gets the preset color "Chartreuse".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Chocolate">
            <summary>
            Gets the preset color "Chocolate".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Coral">
            <summary>
            Gets the preset color "Coral".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.CornflowerBlue">
            <summary>
            Gets the preset color "CornflowerBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Cornsilk">
            <summary>
            Gets the preset color "Cornsilk".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Crimson">
            <summary>
            Gets the preset color "Crimson".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Cyan">
            <summary>
            Gets the preset color "Cyan".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkBlue">
            <summary>
            Gets the preset color "DarkBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkCyan">
            <summary>
            Gets the preset color "DarkCyan".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkGoldenrod">
            <summary>
            Gets the preset color "DarkGoldenrod".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkGray">
            <summary>
            Gets the preset color "DarkGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkGreen">
            <summary>
            Gets the preset color "DarkGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkKhaki">
            <summary>
            Gets the preset color "DarkKhaki".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkMagenta">
            <summary>
            Gets the preset color "DarkMagenta".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkOliveGreen">
            <summary>
            Gets the preset color "DarkOliveGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkOrange">
            <summary>
            Gets the preset color "DarkOrange".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkOrchid">
            <summary>
            Gets the preset color "DarkOrchid".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkRed">
            <summary>
            Gets the preset color "DarkRed".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkSalmon">
            <summary>
            Gets the preset color "DarkSalmon".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkSeaGreen">
            <summary>
            Gets the preset color "DarkSeaGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkSlateBlue">
            <summary>
            Gets the preset color "DarkSlateBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkSlateGray">
            <summary>
            Gets the preset color "DarkSlateGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkTurquoise">
            <summary>
            Gets the preset color "DarkTurquoise".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DarkViolet">
            <summary>
            Gets the preset color "DarkViolet".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DeepPink">
            <summary>
            Gets the preset color "DeepPink".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DeepSkyBlue">
            <summary>
            Gets the preset color "DeepSkyBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DimGray">
            <summary>
            Gets the preset color "DimGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.DodgerBlue">
            <summary>
            Gets the preset color "DodgerBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Firebrick">
            <summary>
            Gets the preset color "Firebrick".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.FloralWhite">
            <summary>
            Gets the preset color "FloralWhite".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.ForestGreen">
            <summary>
            Gets the preset color "ForestGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Fuchsia">
            <summary>
            Gets the preset color "Fuchsia".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Gainsboro">
            <summary>
            Gets the preset color "Gainsboro".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.GhostWhite">
            <summary>
            Gets the preset color "GhostWhite".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Gold">
            <summary>
            Gets the preset color "Gold".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Goldenrod">
            <summary>
            Gets the preset color "Goldenrod".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Gray">
            <summary>
            Gets the preset color "Gray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Green">
            <summary>
            Gets the preset color "Green".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.GreenYellow">
            <summary>
            Gets the preset color "GreenYellow".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Honeydew">
            <summary>
            Gets the preset color "Honeydew".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.HotPink">
            <summary>
            Gets the preset color "HotPink".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.IndianRed">
            <summary>
            Gets the preset color "IndianRed".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Indigo">
            <summary>
            Gets the preset color "Indigo".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Ivory">
            <summary>
            Gets the preset color "Ivory".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Khaki">
            <summary>
            Gets the preset color "Khaki".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Lavender">
            <summary>
            Gets the preset color "Lavender".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LavenderBlush">
            <summary>
            Gets the preset color "LavenderBlush".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LawnGreen">
            <summary>
            Gets the preset color "LawnGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LemonChiffon">
            <summary>
            Gets the preset color "LemonChiffon".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightBlue">
            <summary>
            Gets the preset color "LightBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightCoral">
            <summary>
            Gets the preset color "LightCoral".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightCyan">
            <summary>
            Gets the preset color "LightCyan".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightGoldenrodYellow">
            <summary>
            Gets the preset color "LightGoldenrodYellow".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightGray">
            <summary>
            Gets the preset color "LightGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightGreen">
            <summary>
            Gets the preset color "LightGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightPink">
            <summary>
            Gets the preset color "LightPink".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightSalmon">
            <summary>
            Gets the preset color "LightSalmon".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightSeaGreen">
            <summary>
            Gets the preset color "LightSeaGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightSkyBlue">
            <summary>
            Gets the preset color "LightSkyBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightSlateGray">
            <summary>
            Gets the preset color "LightSlateGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightSteelBlue">
            <summary>
            Gets the preset color "LightSteelBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LightYellow">
            <summary>
            Gets the preset color "LightYellow".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Lime">
            <summary>
            Gets the preset color "Lime".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.LimeGreen">
            <summary>
            Gets the preset color "LimeGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Linen">
            <summary>
            Gets the preset color "Linen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Magenta">
            <summary>
            Gets the preset color "Magenta".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Maroon">
            <summary>
            Gets the preset color "Maroon".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumAquamarine">
            <summary>
            Gets the preset color "MediumAquamarine".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumBlue">
            <summary>
            Gets the preset color "MediumBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumOrchid">
            <summary>
            Gets the preset color "MediumOrchid".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumPurple">
            <summary>
            Gets the preset color "MediumPurple".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumSeaGreen">
            <summary>
            Gets the preset color "MediumSeaGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumSlateBlue">
            <summary>
            Gets the preset color "MediumSlateBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumSpringGreen">
            <summary>
            Gets the preset color "MediumSpringGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumTurquoise">
            <summary>
            Gets the preset color "MediumTurquoise".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MediumVioletRed">
            <summary>
            Gets the preset color "MediumVioletRed".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MidnightBlue">
            <summary>
            Gets the preset color "MidnightBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MintCream">
            <summary>
            Gets the preset color "MintCream".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.MistyRose">
            <summary>
            Gets the preset color "MistyRose".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Moccasin">
            <summary>
            Gets the preset color "Moccasin".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.NavajoWhite">
            <summary>
            Gets the preset color "NavajoWhite".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Navy">
            <summary>
            Gets the preset color "Navy".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.OldLace">
            <summary>
            Gets the preset color "OldLace".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Olive">
            <summary>
            Gets the preset color "Olive".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.OliveDrab">
            <summary>
            Gets the preset color "OliveDrab".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Orange">
            <summary>
            Gets the preset color "Orange".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.OrangeRed">
            <summary>
            Gets the preset color "OrangeRed".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Orchid">
            <summary>
            Gets the preset color "Orchid".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PaleGoldenrod">
            <summary>
            Gets the preset color "PaleGoldenrod".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PaleGreen">
            <summary>
            Gets the preset color "PaleGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PaleTurquoise">
            <summary>
            Gets the preset color "PaleTurquoise".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PaleVioletRed">
            <summary>
            Gets the preset color "PaleVioletRed".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PapayaWhip">
            <summary>
            Gets the preset color "PapayaWhip".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PeachPuff">
            <summary>
            Gets the preset color "PeachPuff".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Peru">
            <summary>
            Gets the preset color "Peru".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Pink">
            <summary>
            Gets the preset color "Pink".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Plum">
            <summary>
            Gets the preset color "Plum".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.PowderBlue">
            <summary>
            Gets the preset color "PowderBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Purple">
            <summary>
            Gets the preset color "Purple".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Red">
            <summary>
            Gets the preset color "Red".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.RosyBrown">
            <summary>
            Gets the preset color "RosyBrown".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.RoyalBlue">
            <summary>
            Gets the preset color "RoyalBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SaddleBrown">
            <summary>
            Gets the preset color "SaddleBrown".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Salmon">
            <summary>
            Gets the preset color "Salmon".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SandyBrown">
            <summary>
            Gets the preset color "SandyBrown".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SeaGreen">
            <summary>
            Gets the preset color "SeaGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SeaShell">
            <summary>
            Gets the preset color "SeaShell".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Sienna">
            <summary>
            Gets the preset color "Sienna".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Silver">
            <summary>
            Gets the preset color "Silver".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SkyBlue">
            <summary>
            Gets the preset color "SkyBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SlateBlue">
            <summary>
            Gets the preset color "SlateBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SlateGray">
            <summary>
            Gets the preset color "SlateGray".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Snow">
            <summary>
            Gets the preset color "Snow".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SpringGreen">
            <summary>
            Gets the preset color "SpringGreen".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.SteelBlue">
            <summary>
            Gets the preset color "SteelBlue".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Tan">
            <summary>
            Gets the preset color "Tan".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Teal">
            <summary>
            Gets the preset color "Teal".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Thistle">
            <summary>
            Gets the preset color "Thistle".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Tomato">
            <summary>
            Gets the preset color "Tomato".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Turquoise">
            <summary>
            Gets the preset color "Turquoise".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Violet">
            <summary>
            Gets the preset color "Violet".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Wheat">
            <summary>
            Gets the preset color "Wheat".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.White">
            <summary>
            Gets the preset color "White".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.WhiteSmoke">
            <summary>
            Gets the preset color "WhiteSmoke".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.Yellow">
            <summary>
            Gets the preset color "Yellow".
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.Colors.PresetSchemeColor.YellowGreen">
            <summary>
            Gets the preset color "YellowGreen".
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Colors.HslSchemeColor">
            <summary>
            Represents a color scheme base color specified using HSL (Hue, Saturation, Lightness) representation.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Colors.HslSchemeColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Themes.Colors.HslSchemeColor"/> class using the provided hue, saturation and lightness levels.
            </summary>
            <param name="hue">The hue, expressed in six-thousandths of a degree. Values outside the range 0 &#x2264; hue &#x003c; 360 x 6000 (21600000) are clamped to this range.</param>
            <param name="saturation">The saturation, expressed in thousandths of one percent. Values outside the range 0 &#x2264; lightness &#x2265; 100 x 1000 (100000) are clamped to this range.</param>
            <param name="lightness">The lightness, expressed in thousandths of one percent. Values outside the range 0 &#x2264; lightness &#x2265; 100 x 1000 (100000) are clamped to this range.</param>
        </member>
        <member name="P:SheetWorx.Themes.Colors.HslSchemeColor.H">
            <summary>
            Gets the hue, expressed in six-thousandths of a degree. Hue therefore has a value in the range 0 &#x2264; hue &#x003c; 360 x 6000 (21600000).
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.HslSchemeColor.L">
            <summary>
            Gets the lightness, expressed in thousandths of one percent. Lightness therefore has a value in the range 0 &#x2264; lightness &#x2265; 100 x 1000 (100000).
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.HslSchemeColor.S">
            <summary>
            Gets the saturation, expressed in thousandths of one percent. Saturation therefore has a value in the range 0 &#x2264; lightness &#x2265; 100 x 1000 (100000).
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.HslSchemeColor.Color">
            <inheritdoc/>
        </member>
        <member name="P:SheetWorx.Themes.Colors.HslSchemeColor.Type">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Themes.Colors.IBaseSchemeColor">
            <summary>
            Represents a color scheme base color.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.IBaseSchemeColor.Color">
            <summary>
            Returns the <see cref="P:SheetWorx.Themes.Colors.IBaseSchemeColor.Color"/> equivalent of this <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.IBaseSchemeColor.Type">
            <summary>
            Returns the <see cref="T:SheetWorx.Themes.Colors.SchemeColorType"/> of this <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Colors.SchemeColor">
            <summary>
            Represents a color in a color scheme associated with a workbook <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
            <remarks>
            A <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/> consists of two elements:
            <list type="bullet">
            <item>A <see cref="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor"/> of type <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/> which specifies the basic properties of the color. Several different classes implement <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/>, each providing a different way to specify a color.</item>
            <item>A collection of zero or more transforms which each modify the <see cref="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor"/> in some way. These transforms are applied to the <see cref="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor"/> sequentially, resulting in the output <see cref="T:SheetWorx.Formatting.Colors.Color"/>.</item>
            </list>
            The result of applying the transforms to the base color is a <see cref="T:SheetWorx.Formatting.Colors.Color"/> which can be obtained using the <see cref="P:SheetWorx.Themes.Colors.SchemeColor.Color"/> property.
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor">
            <summary>
            Gets or sets the base color.
            </summary>
            <exception cref="T:System.ArgumentNullException"><see langword="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SchemeColor.SchemeIndex">
            <summary>
            Returns the <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/> of the color which this <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/> represents in the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SchemeColor.Transforms">
            <summary>
            Returns the collection of transforms to be applied to the <see cref="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SchemeColor.Color">
            <summary>
            Returns the output <see cref="T:SheetWorx.Formatting.Colors.Color"/>, which is the result of applying all transforms sequentially to the <see cref="P:SheetWorx.Themes.Colors.SchemeColor.BaseColor"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SchemeColor.ColorScheme">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.ColorScheme"/> to which this <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/> belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Colors.SchemeColor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Themes.Colors.SchemeColor.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/>.</returns>
        </member>
        <member name="T:SheetWorx.Themes.Colors.ScRgbSchemeColor">
            <summary>
            Represents a color scheme base color specified using scRGB representation.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Colors.ScRgbSchemeColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Themes.Colors.ScRgbSchemeColor"/> class using the provided red, green and blue scRGB channel levels.
            </summary>
            <param name="red">The scRGB red channel level.</param>
            <param name="green">The scRGB green channel level.</param>
            <param name="blue">The scRGB blue channel level.</param>
            <remarks>
            <para>Channel values are expressed in thousandths of one percent. Values outside the range 0 &#x2264; c &#x2265; 100 x 1000 (100000) are clamped to this range.</para>
            <para>Note that this is different to the <see cref="T:SheetWorx.Formatting.Colors.Color"/> struct which expresses scRGB channel values as <see cref="T:System.Single"/> in the range 0 &#x2264; c &#x2264; 1</para>
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.Colors.ScRgbSchemeColor.ScB">
            <summary>
            Gets the scRGB level of the blue channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.ScRgbSchemeColor.ScG">
            <summary>
            Gets the scRGB level of the green channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.ScRgbSchemeColor.ScR">
            <summary>
            Gets the scRGB level of the red channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.ScRgbSchemeColor.Color">
            <inheritdoc/>
        </member>
        <member name="P:SheetWorx.Themes.Colors.ScRgbSchemeColor.Type">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Themes.Colors.SRgbSchemeColor">
            <summary>
            Represents a color scheme base color specified using sRGB representation.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Colors.SRgbSchemeColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.Themes.Colors.SRgbSchemeColor"/> class using the provided red, green and blue sRGB channel levels.
            </summary>
            <param name="red">The sRGB red channel level.</param>
            <param name="green">The sRGB green channel level.</param>
            <param name="blue">The sRGB blue channel level.</param>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SRgbSchemeColor.B">
            <summary>
            Gets the sRGB level of the blue channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SRgbSchemeColor.G">
            <summary>
            Gets the sRGB level of the green channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SRgbSchemeColor.R">
            <summary>
            Gets the sRGB level of the red channel.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SRgbSchemeColor.Color">
            <inheritdoc/>
        </member>
        <member name="P:SheetWorx.Themes.Colors.SRgbSchemeColor.Type">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Themes.Colors.SRgbSchemeColor.ToString">
            <summary>
            Returns the string representation of the <see cref="T:SheetWorx.Themes.Colors.SRgbSchemeColor"/>.
            </summary>
            <returns>The string representation of the <see cref="T:SheetWorx.Themes.Colors.SRgbSchemeColor"/>.</returns>
        </member>
        <member name="T:SheetWorx.Themes.ColorTransforms.NamespaceDoc">
            <summary>
            Contains classes relating to workbook theme color transforms.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.ColorTransforms.TransformCollection">
            <summary>
            Represents a collection of colour tranformations to be applied to an <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/> in a <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorTransforms.TransformCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> to get.</param>
            <returns>The <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.</returns>
        </member>
        <member name="M:SheetWorx.Themes.ColorTransforms.TransformCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Themes.ColorTransforms.TransformCollection.Add(SheetWorx.Themes.ColorTransforms.ISchemeColorTransform)">
            <summary>
            Adds an existing <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> to the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.
            </summary>
            <param name="transform">The <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> to add to the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.</param>
        </member>
        <member name="M:SheetWorx.Themes.ColorTransforms.TransformCollection.Clear">
            <summary>
            Clears the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.ColorTransforms.TransformCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform"/> to remove from the <see cref="T:SheetWorx.Themes.ColorTransforms.TransformCollection"/>.</param>
        </member>
        <member name="T:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform">
            <summary>
            Represents a colour tranformation to be applied to an <see cref="T:SheetWorx.Themes.Colors.IBaseSchemeColor"/> in a <see cref="T:SheetWorx.Themes.Colors.SchemeColor"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.ColorTransforms.ISchemeColorTransform.Apply(SheetWorx.Formatting.Colors.Color)">
            <summary>
            Applies the transformation to the <paramref name="input"/> <see cref="T:SheetWorx.Formatting.Colors.Color"/>.
            </summary>
            <param name="input">The <see cref="T:SheetWorx.Formatting.Colors.Color"/> to which to apply the transformation.</param>
            <returns>The <see cref="T:SheetWorx.Formatting.Colors.Color"/> resulting from the transformation.</returns>
        </member>
        <member name="T:SheetWorx.Themes.Fonts.NamespaceDoc">
            <summary>
            Contains classes relating to workbook theme fonts.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Fonts.Iso15924Scripts">
            <summary>
            Provides helper methods relating to ISO 15924 script codes.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.Iso15924Scripts.ScriptCodeIsValid(System.String)">
            <summary>
            Returns a boolean value indicating whether the given <paramref name="code"/> is a valid ISO 15924 script code.
            </summary>
            <param name="code">The code to test for validity.</param>
            <returns><see langword="true"/> if <paramref name="code"/> is a valid ISO 15924 script code, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.Iso15924Scripts.ScriptName(System.String)">
            <summary>
            Gets the full name of the script represented by the given <paramref name="code"/>.
            </summary>
            <param name="code">The ISO 15924 script code for which to get the full name.</param>
            <returns>The full name for the given ISO 15924 script <paramref name="code"/>.</returns>
        </member>
        <member name="T:SheetWorx.Themes.Fonts.SupplementalFontCollection">
            <summary>
            Represents a collection of mappings from scripts to typefaces for the major or minor font of a <see cref="T:SheetWorx.Themes.FontScheme"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.SupplementalFontCollection.Count">
            <summary>
            Gets the count of items in the <see cref="T:SheetWorx.Themes.Fonts.SupplementalFontCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.SupplementalFontCollection.Item(System.String)">
            <summary>
            Returns the typeface to be used for the given ISO 15924 script code.
            </summary>
            <param name="script">The ISO 15924 script code for which to return the typeface.</param>
            <returns>The typeface to be used for the given ISO 15924 script code.</returns>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.SupplementalFontCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.SupplementalFontCollection.Add(System.String,System.String)">
            <summary>
            Adds the name of the typeface to be used for the given ISO 15924 script code.
            </summary>
            <param name="script">The ISO 15924 script code for which to add a typeface.</param>
            <param name="typeface">The name of the typeface to be used for the given ISO 15924 script code.</param>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.SupplementalFontCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:SheetWorx.Themes.Fonts.SupplementalFontCollection"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.SupplementalFontCollection.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the <see cref="T:SheetWorx.Themes.Fonts.SupplementalFontCollection"/> contains a typeface for the given ISO 15924 script code.
            </summary>
            <param name="script">The ISO 15924 script code for which to test.</param>
            <returns><see langword="true"/> if the <see cref="T:SheetWorx.Themes.Fonts.SupplementalFontCollection"/> contains a typeface for the given ISO 15924 script code, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.Themes.Fonts.SupplementalFontCollection.Remove(System.String)">
            <summary>
            Removes the typeface mapping for the given ISO 15924 script code.
            </summary>
            <param name="script">The ISO 15924 script code for which to remove the typeface mapping</param>
        </member>
        <member name="T:SheetWorx.Themes.Fonts.FontCollection">
            <summary>
            Represents the collection of major or minor fonts belonging to a <see cref="P:SheetWorx.Themes.Fonts.FontCollection.FontScheme"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.Complex">
            <summary>
            Gets the Complex <see cref="T:SheetWorx.Themes.Fonts.ThemeFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.EastAsian">
            <summary>
            Gets the EastAsian <see cref="T:SheetWorx.Themes.Fonts.ThemeFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.Latin">
            <summary>
            Gets the Latin <see cref="T:SheetWorx.Themes.Fonts.ThemeFont"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.SupplementalFonts">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Fonts.SupplementalFontCollection"/> of the <see cref="T:SheetWorx.Themes.Fonts.FontCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.FontNameForCurrentCulture">
            <summary>
            Gets the name of the font to be used for the current culture.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.FontCollection.FontScheme">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.FontScheme"/> to which the <see cref="T:SheetWorx.Themes.Fonts.FontCollection"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Fonts.ThemeFont">
            <summary>
            Represents a typeface specified by a <see cref="T:SheetWorx.Workbook"/> <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Fonts.ThemeFont.Typeface">
            <summary>
            Gets or sets the name of the typeface represented by this <see cref="T:SheetWorx.Themes.Fonts.ThemeFont"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.ColorScheme">
            <summary>
            Represents a color scheme associated with a workbook theme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent1">
            <summary>
            Returns the "Accent 1" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent2">
            <summary>
            Returns the "Accent 2" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent3">
            <summary>
            Returns the "Accent 3" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent4">
            <summary>
            Returns the "Accent 4" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent5">
            <summary>
            Returns the "Accent 5" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Accent6">
            <summary>
            Returns the "Accent 6" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Dark1">
            <summary>
            Returns the "Dark 1" color of the color scheme.
            </summary>
            <remarks>
            This is also referred to as the "Text 1" color.
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Dark2">
            <summary>
            Returns the "Dark 2" color of the color scheme.
            </summary>
            <remarks>
            This is also referred to as the "Text 2" color.
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.FollowedHyperlink">
            <summary>
            Returns the "Followed Hyperlink" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Hyperlink">
            <summary>
            Returns the "Hyperlink" color of the color scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Item(SheetWorx.Themes.ColorSchemeIndex)">
            <summary>
            Returns the color for a given <see cref="T:SheetWorx.Themes.ColorSchemeIndex"/>.
            </summary>
            <param name="index">The index of the color to be returned.</param>
            <returns>The color associated with the <paramref name="index"/>.</returns>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Light1">
            <summary>
            Returns the "Light 1" color of the color scheme.
            </summary>
            <remarks>
            This is also referred to as the "Background 1" color.
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Light2">
            <summary>
            Returns the "Light 2" color of the color scheme.
            </summary>
            <remarks>
            This is also referred to as the "Background 2" color.
            </remarks>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Name">
            <summary>
            Gets or sets the name of the <see cref="T:SheetWorx.Themes.ColorScheme"/>.
            </summary>
            <remarks>Attempting to set the name of the <see cref="T:SheetWorx.Themes.ColorScheme"/> to <see langword="null"/> will actually set it to the empty string.</remarks>
        </member>
        <member name="P:SheetWorx.Themes.ColorScheme.Theme">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Theme"/> to which the <see cref="T:SheetWorx.Themes.ColorScheme"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.ColorSchemeIndex">
            <summary>
            Specifies the index of a color in a color scheme belonging to a workbook theme.
            </summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Dark1">
            <summary>Index of the "Dark 1" color. This is also referred to as the "Text 1" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Light1">
            <summary>Index of the "Light 1" color. This is also referred to as the "Background 1" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Dark2">
            <summary>Index of the "Dark 2" color. This is also referred to as the "Text 2" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Light2">
            <summary>Index of the "Light 2" color. This is also referred to as the "Background 2" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent1">
            <summary>Index of the "Accent 1" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent2">
            <summary>Index of the "Accent 2" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent3">
            <summary>Index of the "Accent 3" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent4">
            <summary>Index of the "Accent 4" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent5">
            <summary>Index of the "Accent 5" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Accent6">
            <summary>Index of the "Accent 6" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.Hyperlink">
            <summary>Index of the "Hyperlink" color.</summary>
        </member>
        <member name="F:SheetWorx.Themes.ColorSchemeIndex.FollowedHyperlink">
            <summary>Index of the "Followed Hyperlink" color.</summary>
        </member>
        <member name="T:SheetWorx.Themes.FontScheme">
            <summary>
            Represents a font scheme associated with a workbook theme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.FontScheme.MajorFont">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Fonts.FontCollection"/> for the Major font of this font scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.FontScheme.MinorFont">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Fonts.FontCollection"/> for the Minor font of this font scheme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.FontScheme.Name">
            <summary>
            Gets or sets the name of the <see cref="T:SheetWorx.Themes.FontScheme"/>.
            </summary>
            <remarks>Attempting to set the name of the <see cref="T:SheetWorx.Themes.FontScheme"/> to <see langword="null"/> will actually set it to the empty string.</remarks>
        </member>
        <member name="P:SheetWorx.Themes.FontScheme.Theme">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Theme"/> to which the <see cref="T:SheetWorx.Themes.FontScheme"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Themes.Theme">
            <summary>
            Represents a <see cref="T:SheetWorx.Workbook"/> theme.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Theme.ColorScheme">
            <summary>
            Returns the color scheme associated with the <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Theme.FontScheme">
            <summary>
            Returns the font scheme associated with the <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Themes.Theme.Name">
            <summary>
            Gets or sets the name of the <see cref="T:SheetWorx.Themes.Theme"/>.
            </summary>
            <remarks>Attempting to set the name of the <see cref="T:SheetWorx.Themes.Theme"/> to <see langword="null"/> will actually set it to the empty string.</remarks>
        </member>
        <member name="P:SheetWorx.Themes.Theme.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the <see cref="T:SheetWorx.Themes.Theme"/> belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.NamespaceDoc">
            <summary>
            Contains classes relating to workbook and worksheet views.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.Pane">
            <summary>
            Represents a single pane in a <see cref="T:SheetWorx.Views.WorksheetView"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Pane.Exists">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Views.Pane"/> exists.
            </summary>
            <remarks>A <see cref="T:SheetWorx.Views.Pane"/> ceases to exist when the <see cref="T:SheetWorx.Views.WorksheetView"/> to which it belongs ceases to exist.</remarks>
        </member>
        <member name="P:SheetWorx.Views.Pane.Index">
            <summary>
            Gets the zero-based index of this <see cref="T:SheetWorx.Views.Pane"/> in the <see cref="T:SheetWorx.Views.PaneCollection"/> of the <see cref="T:SheetWorx.Views.WorksheetView"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Pane.ScrollColumn">
            <summary>
            Gets or sets the scroll column for this <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Pane.ScrollRow">
            <summary>
            Gets or sets the scroll row for this <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Views.Pane.Activate">
            <summary>
            Makes this <see cref="T:SheetWorx.Views.Pane"/> the <see cref="P:SheetWorx.Views.WorksheetView.ActivePane"/> of the <see cref="T:SheetWorx.Views.WorksheetView"/> to which it belongs.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.PaneCollection">
            <summary>
            Represents the collection of panes belonging to a <see cref="T:SheetWorx.Views.WorksheetView"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.PaneCollection.Count">
            <summary>
            Gets the count of panes in the <see cref="T:SheetWorx.Views.PaneCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.PaneCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:SheetWorx.Views.Pane"/> with the given zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Views.Pane"/> to return.</param>
            <returns>The <see cref="T:SheetWorx.Views.Pane"/> with the given zero-based <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> &lt; 0 or <paramref name="index"/> &gt;= <see cref="P:SheetWorx.Views.PaneCollection.Count"/>.</exception>
        </member>
        <member name="T:SheetWorx.Views.PaneIndex">
            <summary>
            Enumeration of <see cref="T:SheetWorx.Views.Pane"/> indices.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.PaneIndex.BottomRight">
            <summary>
            Specifies the bottom right <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.PaneIndex.TopRight">
            <summary>
            Specifies the top right <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.PaneIndex.BottomLeft">
            <summary>
            Specifies the bottom left <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.PaneIndex.TopLeft">
            <summary>
            Specifies the top left <see cref="T:SheetWorx.Views.Pane"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.WindowView">
            <summary>
            Enumeration of view types which may be displayed by a <see cref="T:SheetWorx.Views.WorksheetView"/> in a <see cref="T:SheetWorx.Views.Window"/>.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.WindowView.Normal">
            <summary>
            Specifies the Normal view.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.WindowView.PageBreakPreview">
            <summary>
            Specifies the Page Break Preview view.
            </summary>
        </member>
        <member name="F:SheetWorx.Views.WindowView.PageLayout">
            <summary>
            Specifies the Page Layout view.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.WorksheetViewCollection">
            <summary>
            Represents a collection of worksheet views.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetViewCollection.Count">
            <summary>
            Gets the count of worksheet views in the <see cref="T:SheetWorx.Views.WorksheetViewCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetViewCollection.Item(SheetWorx.Views.Window)">
            <summary>
            Gets the <see cref="T:SheetWorx.Views.WorksheetView"/> which belongs to the given <see cref="T:SheetWorx.Views.Window"/>.
            </summary>
            <param name="window">The <see cref="T:SheetWorx.Views.Window"/> to get the <see cref="T:SheetWorx.Views.WorksheetView"/> for.</param>
            <returns>The <see cref="T:SheetWorx.Views.WorksheetView"/> which belongs to the given <see cref="T:SheetWorx.Views.Window"/>.</returns>
        </member>
        <member name="P:SheetWorx.Views.WorksheetViewCollection.Worksheet">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.Worksheet"/> to which the <see cref="T:SheetWorx.Views.WorksheetViewCollection"/> belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Views.WorksheetViewCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Views.WorksheetViewCollectionEnumerator">
            <summary>
            Represents an enumerator for a <see cref="T:SheetWorx.Views.WorksheetViewCollection"/>.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.Window">
            <summary>
            Represents a window, which encapsulates information relating to a single view of a workbook.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Exists">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Views.Window"/> exists.
            </summary>
            <remarks>A <see cref="T:SheetWorx.Views.Window"/> ceases to exist when the <see cref="T:SheetWorx.Workbook"/> to which it belongs is closed, or when it is removed.</remarks>
        </member>
        <member name="P:SheetWorx.Views.Window.Item(SheetWorx.Sheets.Worksheet)">
            <summary>
            Gets the worksheet view belonging to this window which relates to the provided worksheet.
            </summary>
            <param name="worksheet">The worksheet for which the related worksheet view is required.</param>
            <returns>The worksheet view belonging to this window which relates to the provided worksheet.</returns>
        </member>
        <member name="P:SheetWorx.Views.Window.Index">
            <summary>
            Gets the zero-based index of this window in the collection of windows for this workbook.
            </summary>
            <remarks>
            The active window always has an index of zero.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.Window.Height">
            <summary>
            Gets or sets the height of this window in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Width">
            <summary>
            Gets or sets the width of this window in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Top">
            <summary>
            Gets or sets the position of the top of this window in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Left">
            <summary>
            Gets or sets the position of the left of this window in points.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.TabRatio">
            <summary>
            Gets or sets the ratio of the width of the workbook's tab area to the width of this window's horizontal scroll bar.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Visibility">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.Visibility"/> of this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.ActiveSheet">
            <summary>
            Gets or sets the active sheet in this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.ActiveWorksheet">
            <summary>
            Gets or sets the active worksheet in this window.
            </summary>
            <remarks>
            Only a single sheet can be active in a window at any time.
            If the active sheet (as returned by <see cref="P:SheetWorx.Views.Window.ActiveSheet"/>) is not a worksheet, this property returns <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.Window.AutoFilterDateGrouping">
            <summary>
            Gets or sets whether dates are grouped in auto filters in this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.DisplayHorizontalScrollBar">
            <summary>
            Gets or sets whether a horizontal scroll bar is displayed in this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.DisplayVerticalScrollBar">
            <summary>
            Gets or sets whether a vertical scroll bar is displayed in this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.DisplayWorkbookTabs">
            <summary>
            Gets or sets whether workbook tabs are displayed in this window.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Minimized">
            <summary>
            Gets or sets whether this window is minimized.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.Window.Workbook">
            <summary>
            Gets the workbook to which this window belongs.
            </summary>
        </member>
        <member name="M:SheetWorx.Views.Window.Activate">
            <summary>
            Makes this window the active window for this workbook.
            </summary>
        </member>
        <member name="M:SheetWorx.Views.Window.Close">
            <summary>
            Closes this window.
            </summary>
        </member>
        <member name="T:SheetWorx.Views.WindowCollection">
            <summary>
            Represents the collection of windows belonging to a <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WindowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.Views.Window"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Views.WindowCollection"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Views.Window"/> to get.</param>
            <returns>The <see cref="T:SheetWorx.Views.Window"/> at the given zero-based <paramref name="index"/> in the <see cref="T:SheetWorx.Views.WindowCollection"/>.</returns>
        </member>
        <member name="P:SheetWorx.Views.WindowCollection.Count">
            <summary>
            Gets the count of windows in the <see cref="T:SheetWorx.Views.WindowCollection"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WindowCollection.Workbook">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> to which the windows in the <see cref="T:SheetWorx.Views.WindowCollection"/> relate.
            </summary>
        </member>
        <member name="M:SheetWorx.Views.WindowCollection.Add">
            <summary>
            Adds a new <see cref="T:SheetWorx.Views.Window"/> to the <see cref="T:SheetWorx.Views.WindowCollection"/>.
            </summary>
            <returns>The new <see cref="T:SheetWorx.Views.Window"/> which was added to the <see cref="T:SheetWorx.Views.WindowCollection"/>.</returns>
        </member>
        <member name="M:SheetWorx.Views.WindowCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:SheetWorx.Views.WorksheetView">
            <summary>
            Represents a worksheet view, which encapsulates information relating to a single view of a single worksheet.
            </summary>
            <remarks>
            Each <see cref="T:SheetWorx.Views.Window"/> has a <see cref="T:SheetWorx.Views.WorksheetView"/> for every worksheet in the workbook to which it belongs.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.VerticalSplit">
            <summary>
            Describes the split point between top and bottom
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.HorizontalSplit">
            <summary>
            Describes the split point between left and right
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Exists">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Views.WorksheetView"/> exists.
            </summary>
            <remarks>A <see cref="T:SheetWorx.Views.WorksheetView"/> ceases to exist when the <see cref="T:SheetWorx.Workbook"/> to which it belongs is closed, or when it is removed.</remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayFormulas">
            <summary>
            Gets or sets whether formulas are displayed in cells rather than values in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayGridlines">
            <summary>
            Gets or sets whether gridlines are displayed in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayHeadings">
            <summary>
            Gets or sets whether row and column headings should be displayed in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayZeros">
            <summary>
            Gets or sets whether zeroes should be displayed in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayRightToLeft">
            <summary>
            Gets or sets whether this worksheet view should be displayed right-to-left.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Selected">
            <summary>
            Gets or sets whether the worksheet to which this worksheet view belongs is selected in the window to which this worksheet view relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayRuler">
            <summary>
            Gets or sets whether a ruler should be displayed for this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayOutline">
            <summary>
            Gets or sets whether symbols should be displayed as outlines.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.DisplayWhitespace">
            <summary>
            Gets or sets whether whitespace should be displayed in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.GridlinesHaveDefaultColor">
            <summary>
            Gets or sets whether gridlines should be displayed using their default colour.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.View">
            <summary>
            Gets or sets which <see cref="T:SheetWorx.Views.WindowView"/> this worksheet view should display.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.ScrollColumn">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.ColumnIndex"/> of the scroll column of the <see cref="T:SheetWorx.Views.WorksheetView"/>.
            </summary>
            <remarks>
            When panes are not frozen this returns the scroll column of the top-left pane.
            When panes are frozen this returns the scroll column of the <see cref="P:SheetWorx.Views.WorksheetView.ActivePane"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.ScrollRow">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.RowIndex"/> of the scroll row of the <see cref="T:SheetWorx.Views.WorksheetView"/>.
            </summary>
            <remarks>
            When panes are not frozen this returns the scroll row of the top-left pane.
            When panes are frozen this returns the scroll row of the <see cref="P:SheetWorx.Views.WorksheetView.ActivePane"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.SplitColumn">
            <summary>
            Gets or sets the number of columns to the left of the horizontal split or freeze point, beginning with <see cref="P:SheetWorx.Views.WorksheetView.ScrollColumn"/>.
            </summary>
            <remarks>
            If there is no horizontal split or freeze, this returns zero.
            Setting this to zero will remove any horizontal split or freeze point.
            Setting this while panes are frozen will unfreeze panes and replace freeze points with split points, even if it is set to zero when there was no horizontal freeze point.
            When this is set to a non-zero value, the horizontal split is positioned directly after the specified number of columns, beginning with <see cref="P:SheetWorx.Views.WorksheetView.ScrollColumn"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.SplitHorizontal">
            <summary>
            Gets or sets the position of the horizontal split or freeze point measured in points from the left edge of <see cref="P:SheetWorx.Views.WorksheetView.ScrollColumn"/>.
            </summary>
            <remarks>
            If there is no horizontal split or freeze, this returns zero.
            Setting this to zero will remove any horizontal split or freeze point.
            Setting this while panes are frozen will unfreeze panes and replace freeze points with split points, even if it is set to zero when there was no horizontal freeze point.
            When this is set to a non-zero value, the horizontal split is positioned at the specified number of points to the right of the left edge of <see cref="P:SheetWorx.Views.WorksheetView.ScrollColumn"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.SplitRow">
            <summary>
            Gets or sets the number of rows above the vertical split or freeze point, beginning with <see cref="P:SheetWorx.Views.WorksheetView.ScrollRow"/>.
            </summary>
            <remarks>
            If there is no vertical split or freeze, this returns zero.
            Setting this to zero will remove any vertical split or freeze point.
            Setting this while panes are frozen will unfreeze panes and replace freeze points with split points, even if it is set to zero when there was no vertical freeze point.
            When this is set to a non-zero value, the vertical split is positioned directly after the specified number of rows, beginning with <see cref="P:SheetWorx.Views.WorksheetView.ScrollRow"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.SplitVertical">
            <summary>
            Gets or sets the position of the vertical split or freeze point measured in points from the top edge of <see cref="P:SheetWorx.Views.WorksheetView.ScrollRow"/>.
            </summary>
            <remarks>
            If there is no vertical split or freeze, this returns zero.
            Setting this to zero will remove any vertical split or freeze point.
            Setting this while panes are frozen will unfreeze panes and replace freeze points with split points, even if it is set to zero when there was no vertical freeze point.
            When this is set to a non-zero value, the vertical split is positioned at the specified number of points below the top edge of <see cref="P:SheetWorx.Views.WorksheetView.ScrollRow"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.GridlineColorIndex">
            <summary>
            Gets or sets the gridline colour as an index into the current colour palette of the workbook.
            </summary>
            <remarks>
            Setting this to any value will set <see cref="P:SheetWorx.Views.WorksheetView.GridlinesHaveDefaultColor"/> to <see langword="false"/>.
            If <see cref="P:SheetWorx.Views.WorksheetView.GridlinesHaveDefaultColor"/> is set to <see langword="true"/>, this returns -1.
            </remarks>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.ActivePane">
            <summary>
            Gets the active pane in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.FreezePanes">
            <summary>
            Gets or sets whether panes are frozen in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Split">
            <summary>
            Gets or sets whether panes are split in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Panes">
            <summary>
            Gets the collection of panes which exist in this worksheet view.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Window">
            <summary>
            Gets the window to which this worksheet view belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Worksheet">
            <summary>
            Gets the worksheet to which this worksheet view relates.
            </summary>
        </member>
        <member name="P:SheetWorx.Views.WorksheetView.Zoom">
            <summary>
            Gets or sets the zoom level for this worksheet view.
            </summary>
            <remarks>
            Zoom level is measured in percent, and can range from 10% (zoomed out 10x) to 400% (zoomed in 4x).
            Each <see cref="T:SheetWorx.Views.WindowView"/> type has an independent zoom level, therefore the zoom level of the worksheet view depends on the active <see cref="T:SheetWorx.Views.WindowView"/>.
            </remarks>
        </member>
        <member name="T:SheetWorx.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.ArgumentNull">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.CsvReaderFileHasMoreThanMaxColumns">
            <summary>
              Looks up a localized string similar to The CSV file being read has more columns than the maximum permitted..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.CsvReaderFileHasMoreThanMaxRows">
            <summary>
              Looks up a localized string similar to The CSV file being read has more rows than the maximum permitted..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.CsvReaderRecordWithUnexpectedNumberOfFields">
            <summary>
              Looks up a localized string similar to The CSV file being read does not have an equal number of columns in each row. All rows must have the same number of columns, or be blank. Row {0} fails this condition..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.CsvReaderUnableToDetectSeparatorCharacter">
            <summary>
              Looks up a localized string similar to Unable to detect the delimiter character when attempting to read CSV file..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.CsvReaderUnableToParseFormula">
            <summary>
              Looks up a localized string similar to Unable to parse formula at row {0}, column {1} when attempting to read CSV file..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserBrtBookProtectionAndBrtBookProtectionIsoFlagsDiffer">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read has BrtBookProtectionIso and BrtBookProtection records with different values for wFlags..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserBrtBookProtectionPasswordVerifierNonZeroWhenBrtBookProtectionIsoPresent">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read has a BrtBookProtection record with a non-zero protpwdBook, even though a BrtBookProtectionIso record is also present..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserBrtExternSheetTooManyXti">
            <summary>
              Looks up a localized string similar to The BrtExternSheet record in the Workbook part of the XLSB file being read indicates there are {0} Xti structures in rgXti, but a maximum of 65535 are permitted..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserDefinedNameIsBuiltInButFlagIsInconsistent">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read contains a BrtName representing a defined name, &quot;{0}&quot;, which is a built in name, but the value of fBuiltIn indicates it is not built in..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserDefinedNameIsNotBuiltInButFlagIsInconsistent">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read contains a BrtName representing a defined name, &quot;{0}&quot;, which is not a built in name, but the value of fBuiltIn indicates it is built in..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserInvalidDefinedNameComment">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read contains a BrtName representing a defined name, &quot;{0}&quot;, which has an invalid comment, &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserInvalidDefinedNameName">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read contains a BrtName representing a defined name called &quot;{0}&quot;, but this is not a valid name..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserInvalidSheetName">
            <summary>
              Looks up a localized string similar to The XLSB file being read contains a sheet called &quot;{0}&quot;, which is an invalid sheet name..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserIsoBookSpinCountTooLarge">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read has a BrtBookProtectionIso record with a dwBookSpinCount of {0}, but the maximum permitted is 10,000,000..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorkbookParserXtiWithInvalidExternalLinkIndex">
            <summary>
              Looks up a localized string similar to The Workbook part of the XLSB file being read contains an Xti structure with an externalLink index of {0}, but the part has a supporting link record count of {1}..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorksheetParserBrtBeginWsViewReserved2IsNonZero">
            <summary>
              Looks up a localized string similar to A Worksheet part of the XLSB file being read contains a BrtBeginWsView record with a non-zero value of the reserved2 field..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorksheetParserBrtBeginWsViewReserved3IsNonZero">
            <summary>
              Looks up a localized string similar to A Worksheet part of the XLSB file being read contains a BrtBeginWsView record with a non-zero value of the reserved3 field..
            </summary>
        </member>
        <member name="P:SheetWorx.ExceptionMessages.XlsbWorksheetParserBrtSelInvalidPnn">
            <summary>
              Looks up a localized string similar to A Worksheet part of the XLSB file being read contains a BrtSel record with an invalid value for the pnn field. the value is {0} but the field must be in the range 0-3 inclusive..
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.CharacterHelper.IsValidNameOrSheetNameChar(System.Char)">
            <summary>
            Returns a boolean value indicating whether the character is allowed to be used as a sheet-name character OR as a name character (not including name-start-character, which is more restrictive).
            </summary>
            <param name="c">The character to test.</param>
            <returns>A boolean value indicating whether the character is allowed to be used as a sheet-name character OR as a name character (not including name-start-character, which is more restrictive).</returns>
        </member>
        <member name="M:SheetWorx.Utilities.CharacterHelper.ValidNameOrSheetNameCharIsValidAsStartChar(System.Char)">
            <summary>
            Checks whether a character which has previously been validated as valid for name or sheet-name is also valid as name-start-char. This should only be called after this validation has been performed.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:SheetWorx.Utilities.Conversion.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:SheetWorx.Utilities.Conversion.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:SheetWorx.Utilities.Conversion.Endianness">
            <summary>
            Endianness of a converter
            </summary>
        </member>
        <member name="F:SheetWorx.Utilities.Conversion.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:SheetWorx.Utilities.Conversion.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:SheetWorx.Utilities.Conversion.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:SheetWorx.Utilities.Conversion.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:SheetWorx.Utilities.Conversion.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="M:SheetWorx.Utilities.MethodInfoRetriever.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Given a lambda expression that calls a method, returns the method info.
            </summary>
        </member>
        <member name="M:SheetWorx.Utilities.MethodInfoRetriever.GetMethodInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Given a lambda expression that calls a method, returns the method info.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SheetWorx.Utilities.MethodInfoRetriever.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Given a lambda expression that accesses a property, returns the property info.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SheetWorx.Utilities.MethodInfoRetriever.GetPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Given a lambda expression that accesses a property, returns the property info.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:SheetWorx.Workbook">
            <summary>
            Represents a workbook.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ActiveSheet">
            <summary>
            Gets the active <see cref="T:SheetWorx.Sheets.Sheet"/> in the active <see cref="T:SheetWorx.Views.Window"/> for the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ActiveWindow">
            <summary>
            Gets the active <see cref="T:SheetWorx.Views.Window"/> for the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ActiveWorksheet">
            <summary>
            Gets the active <see cref="T:SheetWorx.Sheets.Worksheet"/> in the active <see cref="T:SheetWorx.Views.Window"/> for the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Colors">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.Colors.ColorPalette"/> associated with the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ConformanceClass">
            <summary>
            Gets the <see cref="T:SheetWorx.Core.ConformanceClass"/> of the Office Open XML file associated with the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Date1904">
            <summary>
            Gets or sets whether date serials in the <see cref="T:SheetWorx.Workbook"/> use the 1904 date system.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.FileType">
            <summary>
            Gets or sets the file type of the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.FullName">
            <summary>
            Gets or sets the full name of the <see cref="T:SheetWorx.Workbook"/>, including path.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.IsOpen">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Workbook"/> is still open.
            </summary>
            <remarks>
            Once a <see cref="T:SheetWorx.Workbook"/> is closed, operations can no longer be performed on it.
            </remarks>
        </member>
        <member name="P:SheetWorx.Workbook.IsOpenXmlFileType">
            <summary>
            Gets a boolean value indicating whether the <see cref="T:SheetWorx.Workbook"/> was saved using one of the Office Open XML file types.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Name">
            <summary>
            Gets the name of the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Path">
            <summary>
            Gets the path to where the <see cref="T:SheetWorx.Workbook"/> is saved.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Names">
            <summary>
            Gets the <see cref="T:SheetWorx.DefinedNames.NameCollection"/> containing all workbook-scoped defined names belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ProtectStructure">
            <summary>
            Gets a boolean value indicating whether the order of the sheets in the <see cref="T:SheetWorx.Workbook"/> is protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.ProtectWindows">
            <summary>
            Gets a boolean value indicating whether the windows in the <see cref="T:SheetWorx.Workbook"/> are protected.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Sheets">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.SheetCollection"/> containing all sheets belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Styles">
            <summary>
            Gets the <see cref="T:SheetWorx.Formatting.StyleCollection"/> containing all cell styles belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Theme">
            <summary>
            Gets the <see cref="T:SheetWorx.Themes.Theme"/> belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Windows">
            <summary>
            Gets the <see cref="T:SheetWorx.Views.WindowCollection"/> containing all windows belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which the <see cref="T:SheetWorx.Workbook"/> belongs. 
            </summary>
        </member>
        <member name="P:SheetWorx.Workbook.Worksheets">
            <summary>
            Gets the <see cref="T:SheetWorx.Sheets.WorksheetCollection"/> containing all worksheets belonging to the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Workbook.ToString">
            <summary>
            Returns the name of the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
            <returns>The name of the <see cref="T:SheetWorx.Workbook"/>.</returns>
        </member>
        <member name="M:SheetWorx.Workbook.Close">
            <summary>
            Closes the <see cref="T:SheetWorx.Workbook"/> without saving it.
            </summary>
        </member>
        <member name="M:SheetWorx.Workbook.Protect(System.String,System.Boolean,System.Boolean)">
            <summary>
            Protects the <see cref="T:SheetWorx.Workbook"/> so that aspects of it cannot be modified.
            </summary>
            <param name="password">The password with which to protect the <see cref="T:SheetWorx.Workbook"/>.</param>
            <param name="protectStructure">Boolean indicating whether the order of the sheets in the <see cref="T:SheetWorx.Workbook"/> should be protected.</param>
            <param name="protectWindows">Boolean indicating whether the windows in the <see cref="T:SheetWorx.Workbook"/> should be protected.</param>
        </member>
        <member name="M:SheetWorx.Workbook.Save">
            <summary>
            Saves the <see cref="T:SheetWorx.Workbook"/> with its current name, <see cref="T:SheetWorx.Core.FileType"/> and if applicable, <see cref="T:SheetWorx.Core.ConformanceClass"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.Workbook.SaveAs(System.String,SheetWorx.Core.FileType)">
            <summary>
            Saves the workbook with the given name and <see cref="T:SheetWorx.Core.FileType"/>.
            </summary>
            <param name="filename">The name (including path) with which to save the <see cref="T:SheetWorx.Workbook"/>.</param>
            <param name="fileType">The <see cref="T:SheetWorx.Core.FileType"/> with which to save the <see cref="T:SheetWorx.Workbook"/>.</param>
            <remarks>
            If <paramref name="fileType"/> is an Office Open XML <see cref="T:SheetWorx.Core.FileType"/>, the file is saved with the <see cref="T:SheetWorx.Core.ConformanceClass"/> specified by the
            <see cref="P:SheetWorx.WorkbookScope.DefaultConformanceClass"/> property of the <see cref="T:SheetWorx.WorkbookScope"/> to which the <see cref="T:SheetWorx.Workbook"/> belongs.
            </remarks>
        </member>
        <member name="M:SheetWorx.Workbook.SaveAs(System.String,SheetWorx.Core.FileType,SheetWorx.Core.ConformanceClass)">
            <summary>
            Saves the workbook with the given name, <see cref="T:SheetWorx.Core.FileType"/> and <see cref="T:SheetWorx.Core.ConformanceClass"/>.
            </summary>
            <param name="filename">The name (including path) with which to save the <see cref="T:SheetWorx.Workbook"/>.</param>
            <param name="fileType">The <see cref="T:SheetWorx.Core.FileType"/> with which to save the <see cref="T:SheetWorx.Workbook"/>.</param>
            <param name="conformanceClass">The Office Open XML <see cref="T:SheetWorx.Core.ConformanceClass"/> with which to save the <see cref="T:SheetWorx.Workbook"/>.</param>
            <remarks>
            If <paramref name="fileType"/> does not specify an Office Open XML <see cref="T:SheetWorx.Core.FileType"/>, <paramref name="conformanceClass"/> is ignored.
            </remarks>
        </member>
        <member name="M:SheetWorx.Workbook.Unprotect(System.String)">
            <summary>
            Removes protection from the <see cref="T:SheetWorx.Workbook"/>.
            </summary>
            <param name="password">The password with which the <see cref="T:SheetWorx.Workbook"/> is currently protected.</param>
        </member>
        <member name="T:SheetWorx.WorkbookCollection">
            <summary>
            Represents the collection of workbooks which are currently open in a <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookCollection.WorkbookScope">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookScope"/> to which this collection belongs.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookCollection.Count">
            <summary>
            Gets the number of workbooks currently open in the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> specified by zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SheetWorx.Workbook"/> to return.</param>
            <returns>The <see cref="T:SheetWorx.Workbook"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indices.</exception>
        </member>
        <member name="P:SheetWorx.WorkbookCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:SheetWorx.Workbook"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SheetWorx.Workbook"/> to return.</param>
            <returns>The <see cref="T:SheetWorx.Workbook"/> with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There is no <see cref="T:SheetWorx.Workbook"/> with the given <paramref name="name"/> open in the <see cref="T:SheetWorx.WorkbookScope"/>.</exception>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Add">
            <summary>
            Adds a new workbook to the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
            <returns>The newly created workbook.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Close">
            <summary>
            Closes all of the workbooks which are currently open in the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.ContainsName(System.String)">
            <summary>
            Tests whether there is a workbook with the provided name currently open in the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
            <param name="name">The workbook name to look for.</param>
            <returns><see langword="true"/> if a workbook with provided name is currently open in the <see cref="T:SheetWorx.WorkbookScope"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.ContainsFullName(System.String)">
            <summary>
            Tests whether there is a workbook with the provided full name currently open in the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
            <param name="name">The workbook full name to look for.</param>
            <returns><see langword="true"/> if a workbook with provided full name is currently open in the <see cref="T:SheetWorx.WorkbookScope"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Contains(SheetWorx.Workbook)">
            <summary>
            Tests whether the provided workbook is currently open in the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
            <param name="workbook">The workbook to test.</param>
            <returns><see langword="true"/> if the workbook is currently open in the <see cref="T:SheetWorx.WorkbookScope"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Open(System.Byte[])">
            <summary>
            Opens an existing workbook from a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array from which the workbook is to be opened.</param>
            <returns>The <see cref="T:SheetWorx.Workbook"/> opened from the <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Open(System.String)">
            <summary>
            Opens an existing workbook from a file with the given <paramref name="path"/>.
            </summary>
            <param name="path">The path to the file from which the workbook is to be opened.</param>
            <returns>The <see cref="T:SheetWorx.Workbook"/> opened from the file with the given <paramref name="path"/>.</returns>
        </member>
        <member name="M:SheetWorx.WorkbookCollection.Open(System.IO.Stream)">
            <summary>
            Opens an existing workbook from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the workbook is to be opened.</param>
            <returns>The <see cref="T:SheetWorx.Workbook"/> opened from the <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="T:SheetWorx.WorkbookScope">
            <summary>
            Represents a scope within which one or more workbooks can exist with knowledge of each other.
            </summary>
        </member>
        <member name="M:SheetWorx.WorkbookScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SheetWorx.WorkbookScope"/> class.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.AlternateStartupPath">
            <summary>
            Gets or sets the name of the alternate startup folder.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.CalculationMode">
            <summary>
            Gets or sets the <see cref="T:SheetWorx.Core.CalculationMode"/> of the <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
            <remarks>
            The value of this property does not impact the calculation of workbooks within the <see cref="T:SheetWorx.WorkbookScope"/>. However, when a <see cref="T:SheetWorx.Workbook"/> is saved, it will be saved with this <see cref="T:SheetWorx.Core.CalculationMode"/>.
            </remarks>
        </member>
        <member name="P:SheetWorx.WorkbookScope.DefaultConformanceClass">
            <summary>
            Gets or sets the default <see cref="T:SheetWorx.Core.ConformanceClass"/> to use when saving a <see cref="T:SheetWorx.Workbook"/> using an Office Open XML file format for the first time.
            </summary>
            <remarks>
            This value is only used when saving a <see cref="T:SheetWorx.Workbook"/> to an Office Open XML file format for the first time using the <see cref="M:SheetWorx.Workbook.SaveAs(System.String,SheetWorx.Core.FileType)"/> method.
            </remarks>
        </member>
        <member name="P:SheetWorx.WorkbookScope.DefaultWorksheetCount">
            <summary>
            Gets or sets the number of worksheets which will be added to new workbooks when they are added to the <see cref="T:SheetWorx.WorkbookScope"/> using the <see cref="M:SheetWorx.WorkbookCollection.Add"/> method.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.LibraryPath">
            <summary>
            Gets or sets the library folder.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.ShiftRangesOnInsertAndDelete">
            <summary>
            Gets or sets a boolean value which determines whether <see cref="T:SheetWorx.Ranges.IRange"/> instances shift in response to the insertion and deletion of cells, or whether their addresses remain constant.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.StartupPath">
            <summary>
            Gets the path of the startup folder.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.Workbooks">
            <summary>
            Gets the <see cref="T:SheetWorx.WorkbookCollection"/> containing all workbooks which are open in this <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="P:SheetWorx.WorkbookScope.AddinFunctions">
            <summary>
            Gets the <see cref="T:SheetWorx.AddinFunctionCollection"/> containing all add-in function names which have been registered in this <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
        <member name="M:SheetWorx.WorkbookScope.Calculate">
            <summary>
            Fully calculates all workbooks in this <see cref="T:SheetWorx.WorkbookScope"/>.
            </summary>
        </member>
    </members>
</doc>
